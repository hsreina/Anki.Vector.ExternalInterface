// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/behavior.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/behavior.proto</summary>
  public static partial class BehaviorReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/behavior.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BehaviorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvYmVoYXZpb3IucHJvdG8SHkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZRokYW5raV92ZWN0b3IvbWVzc2Fn",
            "aW5nL21lc3NhZ2VzLnByb3RvIhAKDkNvbnRyb2xSZWxlYXNlIq4BCg5Db250",
            "cm9sUmVxdWVzdBJJCghwcmlvcml0eRgBIAEoDjI3LkFua2kuVmVjdG9yLmV4",
            "dGVybmFsX2ludGVyZmFjZS5Db250cm9sUmVxdWVzdC5Qcmlvcml0eSJRCghQ",
            "cmlvcml0eRILCgdVTktOT1dOEAASFgoST1ZFUlJJREVfQkVIQVZJT1JTEAoS",
            "CwoHREVGQVVMVBAUEhMKD1JFU0VSVkVfQ09OVFJPTBAeIr4BChZCZWhhdmlv",
            "ckNvbnRyb2xSZXF1ZXN0EkkKD2NvbnRyb2xfcmVsZWFzZRgBIAEoCzIuLkFu",
            "a2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5Db250cm9sUmVsZWFzZUgA",
            "EkkKD2NvbnRyb2xfcmVxdWVzdBgCIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVy",
            "bmFsX2ludGVyZmFjZS5Db250cm9sUmVxdWVzdEgAQg4KDHJlcXVlc3RfdHlw",
            "ZSIYChZDb250cm9sR3JhbnRlZFJlc3BvbnNlIhUKE0NvbnRyb2xMb3N0UmVz",
            "cG9uc2UiHQobUmVzZXJ2ZWRDb250cm9sTG9zdFJlc3BvbnNlIoIDChdCZWhh",
            "dmlvckNvbnRyb2xSZXNwb25zZRJaChhjb250cm9sX2dyYW50ZWRfcmVzcG9u",
            "c2UYASABKAsyNi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQ29u",
            "dHJvbEdyYW50ZWRSZXNwb25zZUgAElEKEmNvbnRyb2xfbG9zdF9ldmVudBgC",
            "IAEoCzIzLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5Db250cm9s",
            "TG9zdFJlc3BvbnNlSAASQwoKa2VlcF9hbGl2ZRgDIAEoCzItLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5LZWVwQWxpdmVQaW5nSAASYgobcmVz",
            "ZXJ2ZWRfY29udHJvbF9sb3N0X2V2ZW50GAQgASgLMjsuQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc2VydmVkQ29udHJvbExvc3RSZXNwb25z",
            "ZUgAQg8KDXJlc3BvbnNlX3R5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ControlRelease), global::Anki.Vector.ExternalInterface.ControlRelease.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ControlRequest), global::Anki.Vector.ExternalInterface.ControlRequest.Parser, new[]{ "Priority" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.ControlRequest.Types.Priority) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.BehaviorControlRequest), global::Anki.Vector.ExternalInterface.BehaviorControlRequest.Parser, new[]{ "ControlRelease", "ControlRequest" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ControlGrantedResponse), global::Anki.Vector.ExternalInterface.ControlGrantedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ControlLostResponse), global::Anki.Vector.ExternalInterface.ControlLostResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ReservedControlLostResponse), global::Anki.Vector.ExternalInterface.ReservedControlLostResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.BehaviorControlResponse), global::Anki.Vector.ExternalInterface.BehaviorControlResponse.Parser, new[]{ "ControlGrantedResponse", "ControlLostEvent", "KeepAlive", "ReservedControlLostEvent" }, new[]{ "ResponseType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Tell the behavior stream to release control from the SDK.
  /// The stream may stay alive, but Vector will be allowed to run
  /// his normal behaviors.
  /// </summary>
  public sealed partial class ControlRelease : pb::IMessage<ControlRelease> {
    private static readonly pb::MessageParser<ControlRelease> _parser = new pb::MessageParser<ControlRelease>(() => new ControlRelease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlRelease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRelease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRelease(ControlRelease other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRelease Clone() {
      return new ControlRelease(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlRelease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlRelease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlRelease other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request control of the behavior system at a given priority.
  /// Currently there is only one priority level.
  /// </summary>
  public sealed partial class ControlRequest : pb::IMessage<ControlRequest> {
    private static readonly pb::MessageParser<ControlRequest> _parser = new pb::MessageParser<ControlRequest>(() => new ControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRequest(ControlRequest other) : this() {
      priority_ = other.priority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlRequest Clone() {
      return new ControlRequest(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ControlRequest.Types.Priority priority_ = 0;
    /// <summary>
    /// Where in the behavior tree the SDK code should be executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ControlRequest.Types.Priority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Priority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Priority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlRequest other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            priority_ = (global::Anki.Vector.ExternalInterface.ControlRequest.Types.Priority) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ControlRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Where in the behavior tree the SDK code should be executed.
      /// </summary>
      public enum Priority {
        /// <summary>
        /// Unknown priority. Used for versions that don't understand old priority levels.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Highest priority level. Suppresses most automatic physical reactions, use with caution. 
        /// </summary>
        [pbr::OriginalName("OVERRIDE_BEHAVIORS")] OverrideBehaviors = 10,
        /// <summary>
        /// Normal priority level. Directly under mandatory physical reactions.
        /// </summary>
        [pbr::OriginalName("DEFAULT")] Default = 20,
        /// <summary>
        /// Enable long-running SDK control between script execution.  Not to be used for regular behavior control.
        /// </summary>
        [pbr::OriginalName("RESERVE_CONTROL")] ReserveControl = 30,
      }

    }
    #endregion

  }

  /// <summary>
  /// Messages that can be sent to the behavior stream. Explicitly
  /// requesting or releasing control.
  /// </summary>
  public sealed partial class BehaviorControlRequest : pb::IMessage<BehaviorControlRequest> {
    private static readonly pb::MessageParser<BehaviorControlRequest> _parser = new pb::MessageParser<BehaviorControlRequest>(() => new BehaviorControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlRequest(BehaviorControlRequest other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.ControlRelease:
          ControlRelease = other.ControlRelease.Clone();
          break;
        case RequestTypeOneofCase.ControlRequest:
          ControlRequest = other.ControlRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlRequest Clone() {
      return new BehaviorControlRequest(this);
    }

    /// <summary>Field number for the "control_release" field.</summary>
    public const int ControlReleaseFieldNumber = 1;
    /// <summary>
    /// Release control of the behavior system back to Vector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ControlRelease ControlRelease {
      get { return requestTypeCase_ == RequestTypeOneofCase.ControlRelease ? (global::Anki.Vector.ExternalInterface.ControlRelease) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ControlRelease;
      }
    }

    /// <summary>Field number for the "control_request" field.</summary>
    public const int ControlRequestFieldNumber = 2;
    /// <summary>
    /// Request control of the behavior system for the SDK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ControlRequest ControlRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.ControlRequest ? (global::Anki.Vector.ExternalInterface.ControlRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ControlRequest;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "request_type" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      ControlRelease = 1,
      ControlRequest = 2,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlRelease, other.ControlRelease)) return false;
      if (!object.Equals(ControlRequest, other.ControlRequest)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRelease) hash ^= ControlRelease.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRequest) hash ^= ControlRequest.GetHashCode();
      hash ^= (int) requestTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRelease) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlRelease);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ControlRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRelease) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlRelease);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ControlRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorControlRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.ControlRelease:
          if (ControlRelease == null) {
            ControlRelease = new global::Anki.Vector.ExternalInterface.ControlRelease();
          }
          ControlRelease.MergeFrom(other.ControlRelease);
          break;
        case RequestTypeOneofCase.ControlRequest:
          if (ControlRequest == null) {
            ControlRequest = new global::Anki.Vector.ExternalInterface.ControlRequest();
          }
          ControlRequest.MergeFrom(other.ControlRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.ControlRelease subBuilder = new global::Anki.Vector.ExternalInterface.ControlRelease();
            if (requestTypeCase_ == RequestTypeOneofCase.ControlRelease) {
              subBuilder.MergeFrom(ControlRelease);
            }
            input.ReadMessage(subBuilder);
            ControlRelease = subBuilder;
            break;
          }
          case 18: {
            global::Anki.Vector.ExternalInterface.ControlRequest subBuilder = new global::Anki.Vector.ExternalInterface.ControlRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ControlRequest) {
              subBuilder.MergeFrom(ControlRequest);
            }
            input.ReadMessage(subBuilder);
            ControlRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The SDK user is now free to run any actions and behaviors they like.
  /// Until a ControlLostResponse is received, they are directly in control
  /// of Vector's behavior system.
  /// </summary>
  public sealed partial class ControlGrantedResponse : pb::IMessage<ControlGrantedResponse> {
    private static readonly pb::MessageParser<ControlGrantedResponse> _parser = new pb::MessageParser<ControlGrantedResponse>(() => new ControlGrantedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlGrantedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlGrantedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlGrantedResponse(ControlGrantedResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlGrantedResponse Clone() {
      return new ControlGrantedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlGrantedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlGrantedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlGrantedResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// This informs the user that they lost control of the behavior system.
  /// All direct actions will be unavailable via the sdk until control is regained.
  /// Regaining control can be either through a call to ControlRequest, or
  /// can be as a result of conditions passed to the original ControlRequest.
  /// </summary>
  public sealed partial class ControlLostResponse : pb::IMessage<ControlLostResponse> {
    private static readonly pb::MessageParser<ControlLostResponse> _parser = new pb::MessageParser<ControlLostResponse>(() => new ControlLostResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlLostResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlLostResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlLostResponse(ControlLostResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlLostResponse Clone() {
      return new ControlLostResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlLostResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlLostResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlLostResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// The ability to reserve control before/after SDK scripts has been lost.  
  /// This control can be regained through another ControlRequest.
  /// </summary>
  public sealed partial class ReservedControlLostResponse : pb::IMessage<ReservedControlLostResponse> {
    private static readonly pb::MessageParser<ReservedControlLostResponse> _parser = new pb::MessageParser<ReservedControlLostResponse>(() => new ReservedControlLostResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservedControlLostResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservedControlLostResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservedControlLostResponse(ReservedControlLostResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservedControlLostResponse Clone() {
      return new ReservedControlLostResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservedControlLostResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservedControlLostResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservedControlLostResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Responses from the behavior stream.
  /// </summary>
  public sealed partial class BehaviorControlResponse : pb::IMessage<BehaviorControlResponse> {
    private static readonly pb::MessageParser<BehaviorControlResponse> _parser = new pb::MessageParser<BehaviorControlResponse>(() => new BehaviorControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlResponse(BehaviorControlResponse other) : this() {
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.ControlGrantedResponse:
          ControlGrantedResponse = other.ControlGrantedResponse.Clone();
          break;
        case ResponseTypeOneofCase.ControlLostEvent:
          ControlLostEvent = other.ControlLostEvent.Clone();
          break;
        case ResponseTypeOneofCase.KeepAlive:
          KeepAlive = other.KeepAlive.Clone();
          break;
        case ResponseTypeOneofCase.ReservedControlLostEvent:
          ReservedControlLostEvent = other.ReservedControlLostEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorControlResponse Clone() {
      return new BehaviorControlResponse(this);
    }

    /// <summary>Field number for the "control_granted_response" field.</summary>
    public const int ControlGrantedResponseFieldNumber = 1;
    /// <summary>
    /// The SDK user is now free to directly control Vector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ControlGrantedResponse ControlGrantedResponse {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ControlGrantedResponse ? (global::Anki.Vector.ExternalInterface.ControlGrantedResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ControlGrantedResponse;
      }
    }

    /// <summary>Field number for the "control_lost_event" field.</summary>
    public const int ControlLostEventFieldNumber = 2;
    /// <summary>
    /// Control of the behavior system has been lost to a higher priority behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ControlLostResponse ControlLostEvent {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ControlLostEvent ? (global::Anki.Vector.ExternalInterface.ControlLostResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ControlLostEvent;
      }
    }

    /// <summary>Field number for the "keep_alive" field.</summary>
    public const int KeepAliveFieldNumber = 3;
    /// <summary>
    /// Used by Vector to verify the connection is still alive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.KeepAlivePing KeepAlive {
      get { return responseTypeCase_ == ResponseTypeOneofCase.KeepAlive ? (global::Anki.Vector.ExternalInterface.KeepAlivePing) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.KeepAlive;
      }
    }

    /// <summary>Field number for the "reserved_control_lost_event" field.</summary>
    public const int ReservedControlLostEventFieldNumber = 4;
    /// <summary>
    /// Behavior system lock has been lost to another connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ReservedControlLostResponse ReservedControlLostEvent {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ReservedControlLostEvent ? (global::Anki.Vector.ExternalInterface.ReservedControlLostResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ReservedControlLostEvent;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "response_type" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      ControlGrantedResponse = 1,
      ControlLostEvent = 2,
      KeepAlive = 3,
      ReservedControlLostEvent = 4,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlGrantedResponse, other.ControlGrantedResponse)) return false;
      if (!object.Equals(ControlLostEvent, other.ControlLostEvent)) return false;
      if (!object.Equals(KeepAlive, other.KeepAlive)) return false;
      if (!object.Equals(ReservedControlLostEvent, other.ReservedControlLostEvent)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlGrantedResponse) hash ^= ControlGrantedResponse.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlLostEvent) hash ^= ControlLostEvent.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.KeepAlive) hash ^= KeepAlive.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ReservedControlLostEvent) hash ^= ReservedControlLostEvent.GetHashCode();
      hash ^= (int) responseTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlGrantedResponse) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlGrantedResponse);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlLostEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(ControlLostEvent);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.KeepAlive) {
        output.WriteRawTag(26);
        output.WriteMessage(KeepAlive);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ReservedControlLostEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(ReservedControlLostEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlGrantedResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlGrantedResponse);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ControlLostEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlLostEvent);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.KeepAlive) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeepAlive);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ReservedControlLostEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservedControlLostEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorControlResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.ControlGrantedResponse:
          if (ControlGrantedResponse == null) {
            ControlGrantedResponse = new global::Anki.Vector.ExternalInterface.ControlGrantedResponse();
          }
          ControlGrantedResponse.MergeFrom(other.ControlGrantedResponse);
          break;
        case ResponseTypeOneofCase.ControlLostEvent:
          if (ControlLostEvent == null) {
            ControlLostEvent = new global::Anki.Vector.ExternalInterface.ControlLostResponse();
          }
          ControlLostEvent.MergeFrom(other.ControlLostEvent);
          break;
        case ResponseTypeOneofCase.KeepAlive:
          if (KeepAlive == null) {
            KeepAlive = new global::Anki.Vector.ExternalInterface.KeepAlivePing();
          }
          KeepAlive.MergeFrom(other.KeepAlive);
          break;
        case ResponseTypeOneofCase.ReservedControlLostEvent:
          if (ReservedControlLostEvent == null) {
            ReservedControlLostEvent = new global::Anki.Vector.ExternalInterface.ReservedControlLostResponse();
          }
          ReservedControlLostEvent.MergeFrom(other.ReservedControlLostEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.ControlGrantedResponse subBuilder = new global::Anki.Vector.ExternalInterface.ControlGrantedResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ControlGrantedResponse) {
              subBuilder.MergeFrom(ControlGrantedResponse);
            }
            input.ReadMessage(subBuilder);
            ControlGrantedResponse = subBuilder;
            break;
          }
          case 18: {
            global::Anki.Vector.ExternalInterface.ControlLostResponse subBuilder = new global::Anki.Vector.ExternalInterface.ControlLostResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ControlLostEvent) {
              subBuilder.MergeFrom(ControlLostEvent);
            }
            input.ReadMessage(subBuilder);
            ControlLostEvent = subBuilder;
            break;
          }
          case 26: {
            global::Anki.Vector.ExternalInterface.KeepAlivePing subBuilder = new global::Anki.Vector.ExternalInterface.KeepAlivePing();
            if (responseTypeCase_ == ResponseTypeOneofCase.KeepAlive) {
              subBuilder.MergeFrom(KeepAlive);
            }
            input.ReadMessage(subBuilder);
            KeepAlive = subBuilder;
            break;
          }
          case 34: {
            global::Anki.Vector.ExternalInterface.ReservedControlLostResponse subBuilder = new global::Anki.Vector.ExternalInterface.ReservedControlLostResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ReservedControlLostEvent) {
              subBuilder.MergeFrom(ReservedControlLostEvent);
            }
            input.ReadMessage(subBuilder);
            ReservedControlLostEvent = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
