// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/cube.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/cube.proto</summary>
  public static partial class CubeReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/cube.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CubeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvY3ViZS5wcm90bxIeQW5raS5WZWN0",
            "b3IuZXh0ZXJuYWxfaW50ZXJmYWNlGiRhbmtpX3ZlY3Rvci9tZXNzYWdpbmcv",
            "bWVzc2FnZXMucHJvdG8aK2Fua2lfdmVjdG9yL21lc3NhZ2luZy9yZXNwb25z",
            "ZV9zdGF0dXMucHJvdG8iFAoSQ29ubmVjdEN1YmVSZXF1ZXN0Io0BChNDb25u",
            "ZWN0Q3ViZVJlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxIPCgdzdWNjZXNz",
            "GAIgASgIEhEKCW9iamVjdF9pZBgDIAEoDRISCgpmYWN0b3J5X2lkGAQgASgJ",
            "IhcKFUN1YmVzQXZhaWxhYmxlUmVxdWVzdCJtChZDdWJlc0F2YWlsYWJsZVJl",
            "c3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFs",
            "X2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxITCgtmYWN0b3J5X2lkcxgCIAMo",
            "CSIXChVEaXNjb25uZWN0Q3ViZVJlcXVlc3QiWAoWRGlzY29ubmVjdEN1YmVS",
            "ZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5h",
            "bF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMiGAoWRmxhc2hDdWJlTGlnaHRz",
            "UmVxdWVzdCJZChdGbGFzaEN1YmVMaWdodHNSZXNwb25zZRI+CgZzdGF0dXMY",
            "ASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9u",
            "c2VTdGF0dXMiHAoaRm9yZ2V0UHJlZmVycmVkQ3ViZVJlcXVlc3QiXQobRm9y",
            "Z2V0UHJlZmVycmVkQ3ViZVJlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFu",
            "a2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cyIt",
            "ChdTZXRQcmVmZXJyZWRDdWJlUmVxdWVzdBISCgpmYWN0b3J5X2lkGAEgASgJ",
            "IloKGFNldFByZWZlcnJlZEN1YmVSZXNwb25zZRI+CgZzdGF0dXMYASABKAsy",
            "Li5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0",
            "dXMisAMKFFNldEN1YmVMaWdodHNSZXF1ZXN0EhEKCW9iamVjdF9pZBgBIAEo",
            "DRIQCghvbl9jb2xvchgCIAMoDRIRCglvZmZfY29sb3IYAyADKA0SFAoMb25f",
            "cGVyaW9kX21zGAQgAygNEhUKDW9mZl9wZXJpb2RfbXMYBSADKA0SHwoXdHJh",
            "bnNpdGlvbl9vbl9wZXJpb2RfbXMYBiADKA0SIAoYdHJhbnNpdGlvbl9vZmZf",
            "cGVyaW9kX21zGAcgAygNEg4KBm9mZnNldBgIIAMoBRIVCg1yZWxhdGl2ZV90",
            "b194GAkgASgCEhUKDXJlbGF0aXZlX3RvX3kYCiABKAISDgoGcm90YXRlGAsg",
            "ASgIElwKDW1ha2VfcmVsYXRpdmUYDCABKA4yRS5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuU2V0Q3ViZUxpZ2h0c1JlcXVlc3QuTWFrZVJlbGF0",
            "aXZlTW9kZSJEChBNYWtlUmVsYXRpdmVNb2RlEgsKB1VOS05PV04QABIHCgNP",
            "RkYQARINCglCWV9DT1JORVIQAhILCgdCWV9TSURFEAMiVwoVU2V0Q3ViZUxp",
            "Z2h0c1Jlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4",
            "dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cyIlCg9PYmplY3RBdmFp",
            "bGFibGUSEgoKZmFjdG9yeV9pZBgBIAEoCSKSAQoVT2JqZWN0Q29ubmVjdGlv",
            "blN0YXRlEhEKCW9iamVjdF9pZBgBIAEoDRISCgpmYWN0b3J5X2lkGAIgASgJ",
            "Ej8KC29iamVjdF90eXBlGAMgASgOMiouQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLk9iamVjdFR5cGUSEQoJY29ubmVjdGVkGAQgASgIIjMKC09i",
            "amVjdE1vdmVkEhEKCXRpbWVzdGFtcBgBIAEoDRIRCglvYmplY3RfaWQYAiAB",
            "KA0iOwoTT2JqZWN0U3RvcHBlZE1vdmluZxIRCgl0aW1lc3RhbXAYASABKA0S",
            "EQoJb2JqZWN0X2lkGAIgASgNInQKE09iamVjdFVwQXhpc0NoYW5nZWQSEQoJ",
            "dGltZXN0YW1wGAEgASgNEhEKCW9iamVjdF9pZBgCIAEoDRI3Cgd1cF9heGlz",
            "GAMgASgOMiYuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlVwQXhp",
            "cyI0CgxPYmplY3RUYXBwZWQSEQoJdGltZXN0YW1wGAEgASgNEhEKCW9iamVj",
            "dF9pZBgCIAEoDSLwAgoTUm9ib3RPYnNlcnZlZE9iamVjdBIRCgl0aW1lc3Rh",
            "bXAYASABKA0SRwoNb2JqZWN0X2ZhbWlseRgCIAEoDjIsLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5PYmplY3RGYW1pbHlCAhgBEj8KC29iamVj",
            "dF90eXBlGAMgASgOMiouQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "Lk9iamVjdFR5cGUSEQoJb2JqZWN0X2lkGAQgASgFEjoKCGltZ19yZWN0GAUg",
            "ASgLMiguQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkNsYWRSZWN0",
            "EjgKBHBvc2UYBiABKAsyKi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZh",
            "Y2UuUG9zZVN0cnVjdBIgChh0b3BfZmFjZV9vcmllbnRhdGlvbl9yYWQYByAB",
            "KAISEQoJaXNfYWN0aXZlGAggASgNIhQKEkN1YmVDb25uZWN0aW9uTG9zdCJk",
            "ChpEZWxldGVDdXN0b21PYmplY3RzUmVxdWVzdBJGCgRtb2RlGAEgASgOMjgu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1c3RvbU9iamVjdERl",
            "bGV0aW9uTW9kZSJdChtEZWxldGVDdXN0b21PYmplY3RzUmVzcG9uc2USPgoG",
            "c3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "LlJlc3BvbnNlU3RhdHVzIpMBCh5DcmVhdGVGaXhlZEN1c3RvbU9iamVjdFJl",
            "cXVlc3QSOAoEcG9zZRgBIAEoCzIqLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5Qb3NlU3RydWN0EhEKCXhfc2l6ZV9tbRgCIAEoAhIRCgl5X3Np",
            "emVfbW0YAyABKAISEQoJel9zaXplX21tGAQgASgCInQKH0NyZWF0ZUZpeGVk",
            "Q3VzdG9tT2JqZWN0UmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5W",
            "ZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzEhEKCW9i",
            "amVjdF9pZBgCIAEoDSK6BAoTQ3VzdG9tQm94RGVmaW5pdGlvbhJICgxtYXJr",
            "ZXJfZnJvbnQYASABKA4yMi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZh",
            "Y2UuQ3VzdG9tT2JqZWN0TWFya2VyEkcKC21hcmtlcl9iYWNrGAIgASgOMjIu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1c3RvbU9iamVjdE1h",
            "cmtlchJGCgptYXJrZXJfdG9wGAMgASgOMjIuQW5raS5WZWN0b3IuZXh0ZXJu",
            "YWxfaW50ZXJmYWNlLkN1c3RvbU9iamVjdE1hcmtlchJJCg1tYXJrZXJfYm90",
            "dG9tGAQgASgOMjIuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1",
            "c3RvbU9iamVjdE1hcmtlchJHCgttYXJrZXJfbGVmdBgFIAEoDjIyLkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5DdXN0b21PYmplY3RNYXJrZXIS",
            "SAoMbWFya2VyX3JpZ2h0GAYgASgOMjIuQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLkN1c3RvbU9iamVjdE1hcmtlchIRCgl4X3NpemVfbW0YByAB",
            "KAISEQoJeV9zaXplX21tGAggASgCEhEKCXpfc2l6ZV9tbRgJIAEoAhIXCg9t",
            "YXJrZXJfd2lkdGhfbW0YCiABKAISGAoQbWFya2VyX2hlaWdodF9tbRgLIAEo",
            "AiKeAQoUQ3VzdG9tQ3ViZURlZmluaXRpb24SQgoGbWFya2VyGAEgASgOMjIu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1c3RvbU9iamVjdE1h",
            "cmtlchIPCgdzaXplX21tGAIgASgCEhcKD21hcmtlcl93aWR0aF9tbRgDIAEo",
            "AhIYChBtYXJrZXJfaGVpZ2h0X21tGAQgASgCIrIBChRDdXN0b21XYWxsRGVm",
            "aW5pdGlvbhJCCgZtYXJrZXIYASABKA4yMi5BbmtpLlZlY3Rvci5leHRlcm5h",
            "bF9pbnRlcmZhY2UuQ3VzdG9tT2JqZWN0TWFya2VyEhAKCHdpZHRoX21tGAIg",
            "ASgCEhEKCWhlaWdodF9tbRgDIAEoAhIXCg9tYXJrZXJfd2lkdGhfbW0YBCAB",
            "KAISGAoQbWFya2VyX2hlaWdodF9tbRgFIAEoAiLwAgoZRGVmaW5lQ3VzdG9t",
            "T2JqZWN0UmVxdWVzdBI/CgtjdXN0b21fdHlwZRgBIAEoDjIqLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5DdXN0b21UeXBlEhEKCWlzX3VuaXF1",
            "ZRgCIAEoCBJJCgpjdXN0b21fYm94GAMgASgLMjMuQW5raS5WZWN0b3IuZXh0",
            "ZXJuYWxfaW50ZXJmYWNlLkN1c3RvbUJveERlZmluaXRpb25IABJLCgtjdXN0",
            "b21fY3ViZRgEIAEoCzI0LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFj",
            "ZS5DdXN0b21DdWJlRGVmaW5pdGlvbkgAEksKC2N1c3RvbV93YWxsGAUgASgL",
            "MjQuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1c3RvbVdhbGxE",
            "ZWZpbml0aW9uSABCGgoYY3VzdG9tX29iamVjdF9kZWZpbml0aW9uIm0KGkRl",
            "ZmluZUN1c3RvbU9iamVjdFJlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFu",
            "a2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxIP",
            "CgdzdWNjZXNzGAIgASgIIqwFCgtPYmplY3RFdmVudBJLChBvYmplY3RfYXZh",
            "aWxhYmxlGAEgASgLMi8uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "Lk9iamVjdEF2YWlsYWJsZUgAElgKF29iamVjdF9jb25uZWN0aW9uX3N0YXRl",
            "GAIgASgLMjUuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLk9iamVj",
            "dENvbm5lY3Rpb25TdGF0ZUgAEkMKDG9iamVjdF9tb3ZlZBgDIAEoCzIrLkFu",
            "a2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5PYmplY3RNb3ZlZEgAElQK",
            "FW9iamVjdF9zdG9wcGVkX21vdmluZxgEIAEoCzIzLkFua2kuVmVjdG9yLmV4",
            "dGVybmFsX2ludGVyZmFjZS5PYmplY3RTdG9wcGVkTW92aW5nSAASVQoWb2Jq",
            "ZWN0X3VwX2F4aXNfY2hhbmdlZBgFIAEoCzIzLkFua2kuVmVjdG9yLmV4dGVy",
            "bmFsX2ludGVyZmFjZS5PYmplY3RVcEF4aXNDaGFuZ2VkSAASRQoNb2JqZWN0",
            "X3RhcHBlZBgGIAEoCzIsLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFj",
            "ZS5PYmplY3RUYXBwZWRIABJUChVyb2JvdF9vYnNlcnZlZF9vYmplY3QYByAB",
            "KAsyMy5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUm9ib3RPYnNl",
            "cnZlZE9iamVjdEgAElIKFGN1YmVfY29ubmVjdGlvbl9sb3N0GAggASgLMjIu",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkN1YmVDb25uZWN0aW9u",
            "TG9zdEgAQhMKEW9iamVjdF9ldmVudF90eXBlKnsKCk9iamVjdFR5cGUSEgoO",
            "SU5WQUxJRF9PQkpFQ1QQABISCg5VTktOT1dOX09CSkVDVBABEhQKEEJMT0NL",
            "X0xJR0hUQ1VCRTEQAhIRCg1DSEFSR0VSX0JBU0lDEAYSHAoYRklSU1RfQ1VT",
            "VE9NX09CSkVDVF9UWVBFEA8q0AMKCkN1c3RvbVR5cGUSFwoTSU5WQUxJRF9D",
            "VVNUT01fVFlQRRAAEhIKDkNVU1RPTV9UWVBFXzAwEAESEgoOQ1VTVE9NX1RZ",
            "UEVfMDEQAhISCg5DVVNUT01fVFlQRV8wMhADEhIKDkNVU1RPTV9UWVBFXzAz",
            "EAQSEgoOQ1VTVE9NX1RZUEVfMDQQBRISCg5DVVNUT01fVFlQRV8wNRAGEhIK",
            "DkNVU1RPTV9UWVBFXzA2EAcSEgoOQ1VTVE9NX1RZUEVfMDcQCBISCg5DVVNU",
            "T01fVFlQRV8wOBAJEhIKDkNVU1RPTV9UWVBFXzA5EAoSEgoOQ1VTVE9NX1RZ",
            "UEVfMTAQCxISCg5DVVNUT01fVFlQRV8xMRAMEhIKDkNVU1RPTV9UWVBFXzEy",
            "EA0SEgoOQ1VTVE9NX1RZUEVfMTMQDhISCg5DVVNUT01fVFlQRV8xNBAPEhIK",
            "DkNVU1RPTV9UWVBFXzE1EBASEgoOQ1VTVE9NX1RZUEVfMTYQERISCg5DVVNU",
            "T01fVFlQRV8xNxASEhIKDkNVU1RPTV9UWVBFXzE4EBMSEgoOQ1VTVE9NX1RZ",
            "UEVfMTkQFBIVChFDVVNUT01fVFlQRV9DT1VOVBAUGgIQASqOAQoMT2JqZWN0",
            "RmFtaWx5EhIKDklOVkFMSURfRkFNSUxZEAASEgoOVU5LTk9XTl9GQU1JTFkQ",
            "ARIJCgVCTE9DSxACEg4KCkxJR0hUX0NVQkUQAxILCgdDSEFSR0VSEAQSEQoN",
            "Q1VTVE9NX09CSkVDVBAHEhcKE09CSkVDVF9GQU1JTFlfQ09VTlQQBxoCEAEq",
            "iAEKBlVwQXhpcxIQCgxJTlZBTElEX0FYSVMQABIOCgpYX05FR0FUSVZFEAES",
            "DgoKWF9QT1NJVElWRRACEg4KCllfTkVHQVRJVkUQAxIOCgpZX1BPU0lUSVZF",
            "EAQSDgoKWl9ORUdBVElWRRAFEg4KClpfUE9TSVRJVkUQBhIMCghOVU1fQVhF",
            "UxAHKlAKD09iamVjdENvbnN0YW50cxIZChVPQkpFQ1RfQ09OU1RBTlRTX05V",
            "TEwQABIiCh5GSVhFRF9DVVNUT01fV0FMTF9USElDS05FU1NfTU0QCiqsBAoS",
            "Q3VzdG9tT2JqZWN0TWFya2VyEhkKFUNVU1RPTV9NQVJLRVJfVU5LTk9XThAA",
            "EhsKF0NVU1RPTV9NQVJLRVJfQ0lSQ0xFU18yEAESGwoXQ1VTVE9NX01BUktF",
            "Ul9DSVJDTEVTXzMQAhIbChdDVVNUT01fTUFSS0VSX0NJUkNMRVNfNBADEhsK",
            "F0NVU1RPTV9NQVJLRVJfQ0lSQ0xFU181EAQSHAoYQ1VTVE9NX01BUktFUl9E",
            "SUFNT05EU18yEAUSHAoYQ1VTVE9NX01BUktFUl9ESUFNT05EU18zEAYSHAoY",
            "Q1VTVE9NX01BUktFUl9ESUFNT05EU180EAcSHAoYQ1VTVE9NX01BUktFUl9E",
            "SUFNT05EU181EAgSHAoYQ1VTVE9NX01BUktFUl9IRVhBR09OU18yEAkSHAoY",
            "Q1VTVE9NX01BUktFUl9IRVhBR09OU18zEAoSHAoYQ1VTVE9NX01BUktFUl9I",
            "RVhBR09OU180EAsSHAoYQ1VTVE9NX01BUktFUl9IRVhBR09OU181EAwSHQoZ",
            "Q1VTVE9NX01BUktFUl9UUklBTkdMRVNfMhANEh0KGUNVU1RPTV9NQVJLRVJf",
            "VFJJQU5HTEVTXzMQDhIdChlDVVNUT01fTUFSS0VSX1RSSUFOR0xFU180EA8S",
            "HQoZQ1VTVE9NX01BUktFUl9UUklBTkdMRVNfNRAQEhcKE0NVU1RPTV9NQVJL",
            "RVJfQ09VTlQQEBoCEAEqpAEKGEN1c3RvbU9iamVjdERlbGV0aW9uTW9kZRIZ",
            "ChVERUxFVElPTl9NQVNLX1VOS05PV04QABImCiJERUxFVElPTl9NQVNLX0ZJ",
            "WEVEX0NVU1RPTV9PQkpFQ1RTEAESJwojREVMRVRJT05fTUFTS19DVVNUT01f",
            "TUFSS0VSX09CSkVDVFMQAhIcChhERUxFVElPTl9NQVNLX0FSQ0hFVFlQRVMQ",
            "A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor, global::Anki.Vector.ExternalInterface.ResponseStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Anki.Vector.ExternalInterface.ObjectType), typeof(global::Anki.Vector.ExternalInterface.CustomType), typeof(global::Anki.Vector.ExternalInterface.ObjectFamily), typeof(global::Anki.Vector.ExternalInterface.UpAxis), typeof(global::Anki.Vector.ExternalInterface.ObjectConstants), typeof(global::Anki.Vector.ExternalInterface.CustomObjectMarker), typeof(global::Anki.Vector.ExternalInterface.CustomObjectDeletionMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ConnectCubeRequest), global::Anki.Vector.ExternalInterface.ConnectCubeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ConnectCubeResponse), global::Anki.Vector.ExternalInterface.ConnectCubeResponse.Parser, new[]{ "Status", "Success", "ObjectId", "FactoryId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CubesAvailableRequest), global::Anki.Vector.ExternalInterface.CubesAvailableRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CubesAvailableResponse), global::Anki.Vector.ExternalInterface.CubesAvailableResponse.Parser, new[]{ "Status", "FactoryIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DisconnectCubeRequest), global::Anki.Vector.ExternalInterface.DisconnectCubeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DisconnectCubeResponse), global::Anki.Vector.ExternalInterface.DisconnectCubeResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.FlashCubeLightsRequest), global::Anki.Vector.ExternalInterface.FlashCubeLightsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.FlashCubeLightsResponse), global::Anki.Vector.ExternalInterface.FlashCubeLightsResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest), global::Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ForgetPreferredCubeResponse), global::Anki.Vector.ExternalInterface.ForgetPreferredCubeResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetPreferredCubeRequest), global::Anki.Vector.ExternalInterface.SetPreferredCubeRequest.Parser, new[]{ "FactoryId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetPreferredCubeResponse), global::Anki.Vector.ExternalInterface.SetPreferredCubeResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetCubeLightsRequest), global::Anki.Vector.ExternalInterface.SetCubeLightsRequest.Parser, new[]{ "ObjectId", "OnColor", "OffColor", "OnPeriodMs", "OffPeriodMs", "TransitionOnPeriodMs", "TransitionOffPeriodMs", "Offset", "RelativeToX", "RelativeToY", "Rotate", "MakeRelative" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types.MakeRelativeMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetCubeLightsResponse), global::Anki.Vector.ExternalInterface.SetCubeLightsResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectAvailable), global::Anki.Vector.ExternalInterface.ObjectAvailable.Parser, new[]{ "FactoryId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectConnectionState), global::Anki.Vector.ExternalInterface.ObjectConnectionState.Parser, new[]{ "ObjectId", "FactoryId", "ObjectType", "Connected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectMoved), global::Anki.Vector.ExternalInterface.ObjectMoved.Parser, new[]{ "Timestamp", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectStoppedMoving), global::Anki.Vector.ExternalInterface.ObjectStoppedMoving.Parser, new[]{ "Timestamp", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged), global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged.Parser, new[]{ "Timestamp", "ObjectId", "UpAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectTapped), global::Anki.Vector.ExternalInterface.ObjectTapped.Parser, new[]{ "Timestamp", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotObservedObject), global::Anki.Vector.ExternalInterface.RobotObservedObject.Parser, new[]{ "Timestamp", "ObjectFamily", "ObjectType", "ObjectId", "ImgRect", "Pose", "TopFaceOrientationRad", "IsActive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CubeConnectionLost), global::Anki.Vector.ExternalInterface.CubeConnectionLost.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest), global::Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DeleteCustomObjectsResponse), global::Anki.Vector.ExternalInterface.DeleteCustomObjectsResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest), global::Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest.Parser, new[]{ "Pose", "XSizeMm", "YSizeMm", "ZSizeMm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CreateFixedCustomObjectResponse), global::Anki.Vector.ExternalInterface.CreateFixedCustomObjectResponse.Parser, new[]{ "Status", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CustomBoxDefinition), global::Anki.Vector.ExternalInterface.CustomBoxDefinition.Parser, new[]{ "MarkerFront", "MarkerBack", "MarkerTop", "MarkerBottom", "MarkerLeft", "MarkerRight", "XSizeMm", "YSizeMm", "ZSizeMm", "MarkerWidthMm", "MarkerHeightMm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CustomCubeDefinition), global::Anki.Vector.ExternalInterface.CustomCubeDefinition.Parser, new[]{ "Marker", "SizeMm", "MarkerWidthMm", "MarkerHeightMm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CustomWallDefinition), global::Anki.Vector.ExternalInterface.CustomWallDefinition.Parser, new[]{ "Marker", "WidthMm", "HeightMm", "MarkerWidthMm", "MarkerHeightMm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DefineCustomObjectRequest), global::Anki.Vector.ExternalInterface.DefineCustomObjectRequest.Parser, new[]{ "CustomType", "IsUnique", "CustomBox", "CustomCube", "CustomWall" }, new[]{ "CustomObjectDefinition" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DefineCustomObjectResponse), global::Anki.Vector.ExternalInterface.DefineCustomObjectResponse.Parser, new[]{ "Status", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ObjectEvent), global::Anki.Vector.ExternalInterface.ObjectEvent.Parser, new[]{ "ObjectAvailable", "ObjectConnectionState", "ObjectMoved", "ObjectStoppedMoving", "ObjectUpAxisChanged", "ObjectTapped", "RobotObservedObject", "CubeConnectionLost" }, new[]{ "ObjectEventType" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ObjectType {
    [pbr::OriginalName("INVALID_OBJECT")] InvalidObject = 0,
    [pbr::OriginalName("UNKNOWN_OBJECT")] UnknownObject = 1,
    /// <summary>
    ///////////////////////////////////////////////////////////////////////////
    /// Light Cube (a.k.a. Active Block)
    /// </summary>
    [pbr::OriginalName("BLOCK_LIGHTCUBE1")] BlockLightcube1 = 2,
    [pbr::OriginalName("CHARGER_BASIC")] ChargerBasic = 6,
    [pbr::OriginalName("FIRST_CUSTOM_OBJECT_TYPE")] FirstCustomObjectType = 15,
  }

  public enum CustomType {
    [pbr::OriginalName("INVALID_CUSTOM_TYPE")] InvalidCustomType = 0,
    [pbr::OriginalName("CUSTOM_TYPE_00")] _00 = 1,
    [pbr::OriginalName("CUSTOM_TYPE_01")] _01 = 2,
    [pbr::OriginalName("CUSTOM_TYPE_02")] _02 = 3,
    [pbr::OriginalName("CUSTOM_TYPE_03")] _03 = 4,
    [pbr::OriginalName("CUSTOM_TYPE_04")] _04 = 5,
    [pbr::OriginalName("CUSTOM_TYPE_05")] _05 = 6,
    [pbr::OriginalName("CUSTOM_TYPE_06")] _06 = 7,
    [pbr::OriginalName("CUSTOM_TYPE_07")] _07 = 8,
    [pbr::OriginalName("CUSTOM_TYPE_08")] _08 = 9,
    [pbr::OriginalName("CUSTOM_TYPE_09")] _09 = 10,
    [pbr::OriginalName("CUSTOM_TYPE_10")] _10 = 11,
    [pbr::OriginalName("CUSTOM_TYPE_11")] _11 = 12,
    [pbr::OriginalName("CUSTOM_TYPE_12")] _12 = 13,
    [pbr::OriginalName("CUSTOM_TYPE_13")] _13 = 14,
    [pbr::OriginalName("CUSTOM_TYPE_14")] _14 = 15,
    [pbr::OriginalName("CUSTOM_TYPE_15")] _15 = 16,
    [pbr::OriginalName("CUSTOM_TYPE_16")] _16 = 17,
    [pbr::OriginalName("CUSTOM_TYPE_17")] _17 = 18,
    [pbr::OriginalName("CUSTOM_TYPE_18")] _18 = 19,
    [pbr::OriginalName("CUSTOM_TYPE_19")] _19 = 20,
    [pbr::OriginalName("CUSTOM_TYPE_COUNT", PreferredAlias = false)] Count = 20,
  }

  /// <summary>
  /// Note: ObjectFamily is deprecated and will be removed in future releases
  /// </summary>
  public enum ObjectFamily {
    [pbr::OriginalName("INVALID_FAMILY")] InvalidFamily = 0,
    [pbr::OriginalName("UNKNOWN_FAMILY")] UnknownFamily = 1,
    [pbr::OriginalName("BLOCK")] Block = 2,
    [pbr::OriginalName("LIGHT_CUBE")] LightCube = 3,
    [pbr::OriginalName("CHARGER")] Charger = 4,
    [pbr::OriginalName("CUSTOM_OBJECT")] CustomObject = 7,
    [pbr::OriginalName("OBJECT_FAMILY_COUNT", PreferredAlias = false)] Count = 7,
  }

  public enum UpAxis {
    [pbr::OriginalName("INVALID_AXIS")] InvalidAxis = 0,
    [pbr::OriginalName("X_NEGATIVE")] XNegative = 1,
    [pbr::OriginalName("X_POSITIVE")] XPositive = 2,
    [pbr::OriginalName("Y_NEGATIVE")] YNegative = 3,
    [pbr::OriginalName("Y_POSITIVE")] YPositive = 4,
    [pbr::OriginalName("Z_NEGATIVE")] ZNegative = 5,
    [pbr::OriginalName("Z_POSITIVE")] ZPositive = 6,
    [pbr::OriginalName("NUM_AXES")] NumAxes = 7,
  }

  /// <summary>
  /// Constants associated with the audio feed
  /// </summary>
  public enum ObjectConstants {
    /// <summary>
    /// error value
    /// </summary>
    [pbr::OriginalName("OBJECT_CONSTANTS_NULL")] Null = 0,
    /// <summary>
    /// The depth of custom walls used in the engine
    /// </summary>
    [pbr::OriginalName("FIXED_CUSTOM_WALL_THICKNESS_MM")] FixedCustomWallThicknessMm = 10,
  }

  public enum CustomObjectMarker {
    [pbr::OriginalName("CUSTOM_MARKER_UNKNOWN")] CustomMarkerUnknown = 0,
    [pbr::OriginalName("CUSTOM_MARKER_CIRCLES_2")] CustomMarkerCircles2 = 1,
    [pbr::OriginalName("CUSTOM_MARKER_CIRCLES_3")] CustomMarkerCircles3 = 2,
    [pbr::OriginalName("CUSTOM_MARKER_CIRCLES_4")] CustomMarkerCircles4 = 3,
    [pbr::OriginalName("CUSTOM_MARKER_CIRCLES_5")] CustomMarkerCircles5 = 4,
    [pbr::OriginalName("CUSTOM_MARKER_DIAMONDS_2")] CustomMarkerDiamonds2 = 5,
    [pbr::OriginalName("CUSTOM_MARKER_DIAMONDS_3")] CustomMarkerDiamonds3 = 6,
    [pbr::OriginalName("CUSTOM_MARKER_DIAMONDS_4")] CustomMarkerDiamonds4 = 7,
    [pbr::OriginalName("CUSTOM_MARKER_DIAMONDS_5")] CustomMarkerDiamonds5 = 8,
    [pbr::OriginalName("CUSTOM_MARKER_HEXAGONS_2")] CustomMarkerHexagons2 = 9,
    [pbr::OriginalName("CUSTOM_MARKER_HEXAGONS_3")] CustomMarkerHexagons3 = 10,
    [pbr::OriginalName("CUSTOM_MARKER_HEXAGONS_4")] CustomMarkerHexagons4 = 11,
    [pbr::OriginalName("CUSTOM_MARKER_HEXAGONS_5")] CustomMarkerHexagons5 = 12,
    [pbr::OriginalName("CUSTOM_MARKER_TRIANGLES_2")] CustomMarkerTriangles2 = 13,
    [pbr::OriginalName("CUSTOM_MARKER_TRIANGLES_3")] CustomMarkerTriangles3 = 14,
    [pbr::OriginalName("CUSTOM_MARKER_TRIANGLES_4")] CustomMarkerTriangles4 = 15,
    [pbr::OriginalName("CUSTOM_MARKER_TRIANGLES_5")] CustomMarkerTriangles5 = 16,
    [pbr::OriginalName("CUSTOM_MARKER_COUNT", PreferredAlias = false)] CustomMarkerCount = 16,
  }

  public enum CustomObjectDeletionMode {
    [pbr::OriginalName("DELETION_MASK_UNKNOWN")] DeletionMaskUnknown = 0,
    [pbr::OriginalName("DELETION_MASK_FIXED_CUSTOM_OBJECTS")] DeletionMaskFixedCustomObjects = 1,
    [pbr::OriginalName("DELETION_MASK_CUSTOM_MARKER_OBJECTS")] DeletionMaskCustomMarkerObjects = 2,
    [pbr::OriginalName("DELETION_MASK_ARCHETYPES")] DeletionMaskArchetypes = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Attempt to connect to a cube. If a cube is currently connected,
  /// this will do nothing.
  /// </summary>
  public sealed partial class ConnectCubeRequest : pb::IMessage<ConnectCubeRequest> {
    private static readonly pb::MessageParser<ConnectCubeRequest> _parser = new pb::MessageParser<ConnectCubeRequest>(() => new ConnectCubeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectCubeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeRequest(ConnectCubeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeRequest Clone() {
      return new ConnectCubeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectCubeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectCubeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectCubeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ConnectCubeResponse : pb::IMessage<ConnectCubeResponse> {
    private static readonly pb::MessageParser<ConnectCubeResponse> _parser = new pb::MessageParser<ConnectCubeResponse>(() => new ConnectCubeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectCubeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeResponse(ConnectCubeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      success_ = other.success_;
      objectId_ = other.objectId_;
      factoryId_ = other.factoryId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCubeResponse Clone() {
      return new ConnectCubeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 3;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "factory_id" field.</summary>
    public const int FactoryIdFieldNumber = 4;
    private string factoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactoryId {
      get { return factoryId_; }
      set {
        factoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectCubeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectCubeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Success != other.Success) return false;
      if (ObjectId != other.ObjectId) return false;
      if (FactoryId != other.FactoryId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (FactoryId.Length != 0) hash ^= FactoryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ObjectId);
      }
      if (FactoryId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FactoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (FactoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactoryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectCubeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.FactoryId.Length != 0) {
        FactoryId = other.FactoryId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 24: {
            ObjectId = input.ReadUInt32();
            break;
          }
          case 34: {
            FactoryId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CubesAvailableRequest : pb::IMessage<CubesAvailableRequest> {
    private static readonly pb::MessageParser<CubesAvailableRequest> _parser = new pb::MessageParser<CubesAvailableRequest>(() => new CubesAvailableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CubesAvailableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableRequest(CubesAvailableRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableRequest Clone() {
      return new CubesAvailableRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CubesAvailableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CubesAvailableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CubesAvailableRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CubesAvailableResponse : pb::IMessage<CubesAvailableResponse> {
    private static readonly pb::MessageParser<CubesAvailableResponse> _parser = new pb::MessageParser<CubesAvailableResponse>(() => new CubesAvailableResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CubesAvailableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableResponse(CubesAvailableResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      factoryIds_ = other.factoryIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubesAvailableResponse Clone() {
      return new CubesAvailableResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "factory_ids" field.</summary>
    public const int FactoryIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_factoryIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> factoryIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FactoryIds {
      get { return factoryIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CubesAvailableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CubesAvailableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!factoryIds_.Equals(other.factoryIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= factoryIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      factoryIds_.WriteTo(output, _repeated_factoryIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += factoryIds_.CalculateSize(_repeated_factoryIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CubesAvailableResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      factoryIds_.Add(other.factoryIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            factoryIds_.AddEntriesFrom(input, _repeated_factoryIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests a disconnection from the currently connected cube.
  /// </summary>
  public sealed partial class DisconnectCubeRequest : pb::IMessage<DisconnectCubeRequest> {
    private static readonly pb::MessageParser<DisconnectCubeRequest> _parser = new pb::MessageParser<DisconnectCubeRequest>(() => new DisconnectCubeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectCubeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeRequest(DisconnectCubeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeRequest Clone() {
      return new DisconnectCubeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectCubeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectCubeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectCubeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DisconnectCubeResponse : pb::IMessage<DisconnectCubeResponse> {
    private static readonly pb::MessageParser<DisconnectCubeResponse> _parser = new pb::MessageParser<DisconnectCubeResponse>(() => new DisconnectCubeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectCubeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeResponse(DisconnectCubeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectCubeResponse Clone() {
      return new DisconnectCubeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectCubeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectCubeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectCubeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Plays the default cube connection animation on the currently
  /// connected cube's lights.  This is intended for app level user
  /// surfacing of cube connectivity, not for sdk cube light control.
  /// </summary>
  public sealed partial class FlashCubeLightsRequest : pb::IMessage<FlashCubeLightsRequest> {
    private static readonly pb::MessageParser<FlashCubeLightsRequest> _parser = new pb::MessageParser<FlashCubeLightsRequest>(() => new FlashCubeLightsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlashCubeLightsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsRequest(FlashCubeLightsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsRequest Clone() {
      return new FlashCubeLightsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlashCubeLightsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlashCubeLightsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlashCubeLightsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FlashCubeLightsResponse : pb::IMessage<FlashCubeLightsResponse> {
    private static readonly pb::MessageParser<FlashCubeLightsResponse> _parser = new pb::MessageParser<FlashCubeLightsResponse>(() => new FlashCubeLightsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlashCubeLightsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsResponse(FlashCubeLightsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlashCubeLightsResponse Clone() {
      return new FlashCubeLightsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlashCubeLightsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlashCubeLightsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlashCubeLightsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Forget the robot's preferred cube. This will cause the robot to
  /// connect to the cube with the highest RSSI (signal strength) next
  /// time a connection is requested. Saves this preference to disk.
  /// The next cube that the robot connects to will become its
  /// preferred cube.
  /// </summary>
  public sealed partial class ForgetPreferredCubeRequest : pb::IMessage<ForgetPreferredCubeRequest> {
    private static readonly pb::MessageParser<ForgetPreferredCubeRequest> _parser = new pb::MessageParser<ForgetPreferredCubeRequest>(() => new ForgetPreferredCubeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetPreferredCubeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeRequest(ForgetPreferredCubeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeRequest Clone() {
      return new ForgetPreferredCubeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetPreferredCubeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetPreferredCubeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetPreferredCubeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ForgetPreferredCubeResponse : pb::IMessage<ForgetPreferredCubeResponse> {
    private static readonly pb::MessageParser<ForgetPreferredCubeResponse> _parser = new pb::MessageParser<ForgetPreferredCubeResponse>(() => new ForgetPreferredCubeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetPreferredCubeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeResponse(ForgetPreferredCubeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPreferredCubeResponse Clone() {
      return new ForgetPreferredCubeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetPreferredCubeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetPreferredCubeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetPreferredCubeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set the robot's preferred cube and save it to disk. The robot
  /// will always attempt to connect to this cube if it is available.
  /// This is only used in simulation for now.
  /// </summary>
  public sealed partial class SetPreferredCubeRequest : pb::IMessage<SetPreferredCubeRequest> {
    private static readonly pb::MessageParser<SetPreferredCubeRequest> _parser = new pb::MessageParser<SetPreferredCubeRequest>(() => new SetPreferredCubeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPreferredCubeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeRequest(SetPreferredCubeRequest other) : this() {
      factoryId_ = other.factoryId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeRequest Clone() {
      return new SetPreferredCubeRequest(this);
    }

    /// <summary>Field number for the "factory_id" field.</summary>
    public const int FactoryIdFieldNumber = 1;
    private string factoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactoryId {
      get { return factoryId_; }
      set {
        factoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPreferredCubeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPreferredCubeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FactoryId != other.FactoryId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FactoryId.Length != 0) hash ^= FactoryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FactoryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FactoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FactoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactoryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPreferredCubeRequest other) {
      if (other == null) {
        return;
      }
      if (other.FactoryId.Length != 0) {
        FactoryId = other.FactoryId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FactoryId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPreferredCubeResponse : pb::IMessage<SetPreferredCubeResponse> {
    private static readonly pb::MessageParser<SetPreferredCubeResponse> _parser = new pb::MessageParser<SetPreferredCubeResponse>(() => new SetPreferredCubeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPreferredCubeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeResponse(SetPreferredCubeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPreferredCubeResponse Clone() {
      return new SetPreferredCubeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPreferredCubeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPreferredCubeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPreferredCubeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sets each LED on victor's cube.  Two states are specified
  /// designated 'on' and 'off', each with a color, duration,
  /// and state transition time
  /// </summary>
  public sealed partial class SetCubeLightsRequest : pb::IMessage<SetCubeLightsRequest> {
    private static readonly pb::MessageParser<SetCubeLightsRequest> _parser = new pb::MessageParser<SetCubeLightsRequest>(() => new SetCubeLightsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCubeLightsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsRequest(SetCubeLightsRequest other) : this() {
      objectId_ = other.objectId_;
      onColor_ = other.onColor_.Clone();
      offColor_ = other.offColor_.Clone();
      onPeriodMs_ = other.onPeriodMs_.Clone();
      offPeriodMs_ = other.offPeriodMs_.Clone();
      transitionOnPeriodMs_ = other.transitionOnPeriodMs_.Clone();
      transitionOffPeriodMs_ = other.transitionOffPeriodMs_.Clone();
      offset_ = other.offset_.Clone();
      relativeToX_ = other.relativeToX_;
      relativeToY_ = other.relativeToY_;
      rotate_ = other.rotate_;
      makeRelative_ = other.makeRelative_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsRequest Clone() {
      return new SetCubeLightsRequest(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "on_color" field.</summary>
    public const int OnColorFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_onColor_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> onColor_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OnColor {
      get { return onColor_; }
    }

    /// <summary>Field number for the "off_color" field.</summary>
    public const int OffColorFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_offColor_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> offColor_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OffColor {
      get { return offColor_; }
    }

    /// <summary>Field number for the "on_period_ms" field.</summary>
    public const int OnPeriodMsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_onPeriodMs_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> onPeriodMs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OnPeriodMs {
      get { return onPeriodMs_; }
    }

    /// <summary>Field number for the "off_period_ms" field.</summary>
    public const int OffPeriodMsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_offPeriodMs_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> offPeriodMs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OffPeriodMs {
      get { return offPeriodMs_; }
    }

    /// <summary>Field number for the "transition_on_period_ms" field.</summary>
    public const int TransitionOnPeriodMsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_transitionOnPeriodMs_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> transitionOnPeriodMs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TransitionOnPeriodMs {
      get { return transitionOnPeriodMs_; }
    }

    /// <summary>Field number for the "transition_off_period_ms" field.</summary>
    public const int TransitionOffPeriodMsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_transitionOffPeriodMs_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> transitionOffPeriodMs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TransitionOffPeriodMs {
      get { return transitionOffPeriodMs_; }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_offset_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> offset_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Offset {
      get { return offset_; }
    }

    /// <summary>Field number for the "relative_to_x" field.</summary>
    public const int RelativeToXFieldNumber = 9;
    private float relativeToX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RelativeToX {
      get { return relativeToX_; }
      set {
        relativeToX_ = value;
      }
    }

    /// <summary>Field number for the "relative_to_y" field.</summary>
    public const int RelativeToYFieldNumber = 10;
    private float relativeToY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RelativeToY {
      get { return relativeToY_; }
      set {
        relativeToY_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 11;
    private bool rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "make_relative" field.</summary>
    public const int MakeRelativeFieldNumber = 12;
    private global::Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types.MakeRelativeMode makeRelative_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types.MakeRelativeMode MakeRelative {
      get { return makeRelative_; }
      set {
        makeRelative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCubeLightsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCubeLightsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if(!onColor_.Equals(other.onColor_)) return false;
      if(!offColor_.Equals(other.offColor_)) return false;
      if(!onPeriodMs_.Equals(other.onPeriodMs_)) return false;
      if(!offPeriodMs_.Equals(other.offPeriodMs_)) return false;
      if(!transitionOnPeriodMs_.Equals(other.transitionOnPeriodMs_)) return false;
      if(!transitionOffPeriodMs_.Equals(other.transitionOffPeriodMs_)) return false;
      if(!offset_.Equals(other.offset_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RelativeToX, other.RelativeToX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RelativeToY, other.RelativeToY)) return false;
      if (Rotate != other.Rotate) return false;
      if (MakeRelative != other.MakeRelative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      hash ^= onColor_.GetHashCode();
      hash ^= offColor_.GetHashCode();
      hash ^= onPeriodMs_.GetHashCode();
      hash ^= offPeriodMs_.GetHashCode();
      hash ^= transitionOnPeriodMs_.GetHashCode();
      hash ^= transitionOffPeriodMs_.GetHashCode();
      hash ^= offset_.GetHashCode();
      if (RelativeToX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RelativeToX);
      if (RelativeToY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RelativeToY);
      if (Rotate != false) hash ^= Rotate.GetHashCode();
      if (MakeRelative != 0) hash ^= MakeRelative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ObjectId);
      }
      onColor_.WriteTo(output, _repeated_onColor_codec);
      offColor_.WriteTo(output, _repeated_offColor_codec);
      onPeriodMs_.WriteTo(output, _repeated_onPeriodMs_codec);
      offPeriodMs_.WriteTo(output, _repeated_offPeriodMs_codec);
      transitionOnPeriodMs_.WriteTo(output, _repeated_transitionOnPeriodMs_codec);
      transitionOffPeriodMs_.WriteTo(output, _repeated_transitionOffPeriodMs_codec);
      offset_.WriteTo(output, _repeated_offset_codec);
      if (RelativeToX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RelativeToX);
      }
      if (RelativeToY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RelativeToY);
      }
      if (Rotate != false) {
        output.WriteRawTag(88);
        output.WriteBool(Rotate);
      }
      if (MakeRelative != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) MakeRelative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      size += onColor_.CalculateSize(_repeated_onColor_codec);
      size += offColor_.CalculateSize(_repeated_offColor_codec);
      size += onPeriodMs_.CalculateSize(_repeated_onPeriodMs_codec);
      size += offPeriodMs_.CalculateSize(_repeated_offPeriodMs_codec);
      size += transitionOnPeriodMs_.CalculateSize(_repeated_transitionOnPeriodMs_codec);
      size += transitionOffPeriodMs_.CalculateSize(_repeated_transitionOffPeriodMs_codec);
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (RelativeToX != 0F) {
        size += 1 + 4;
      }
      if (RelativeToY != 0F) {
        size += 1 + 4;
      }
      if (Rotate != false) {
        size += 1 + 1;
      }
      if (MakeRelative != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MakeRelative);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCubeLightsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      onColor_.Add(other.onColor_);
      offColor_.Add(other.offColor_);
      onPeriodMs_.Add(other.onPeriodMs_);
      offPeriodMs_.Add(other.offPeriodMs_);
      transitionOnPeriodMs_.Add(other.transitionOnPeriodMs_);
      transitionOffPeriodMs_.Add(other.transitionOffPeriodMs_);
      offset_.Add(other.offset_);
      if (other.RelativeToX != 0F) {
        RelativeToX = other.RelativeToX;
      }
      if (other.RelativeToY != 0F) {
        RelativeToY = other.RelativeToY;
      }
      if (other.Rotate != false) {
        Rotate = other.Rotate;
      }
      if (other.MakeRelative != 0) {
        MakeRelative = other.MakeRelative;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            onColor_.AddEntriesFrom(input, _repeated_onColor_codec);
            break;
          }
          case 26:
          case 24: {
            offColor_.AddEntriesFrom(input, _repeated_offColor_codec);
            break;
          }
          case 34:
          case 32: {
            onPeriodMs_.AddEntriesFrom(input, _repeated_onPeriodMs_codec);
            break;
          }
          case 42:
          case 40: {
            offPeriodMs_.AddEntriesFrom(input, _repeated_offPeriodMs_codec);
            break;
          }
          case 50:
          case 48: {
            transitionOnPeriodMs_.AddEntriesFrom(input, _repeated_transitionOnPeriodMs_codec);
            break;
          }
          case 58:
          case 56: {
            transitionOffPeriodMs_.AddEntriesFrom(input, _repeated_transitionOffPeriodMs_codec);
            break;
          }
          case 66:
          case 64: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
          case 77: {
            RelativeToX = input.ReadFloat();
            break;
          }
          case 85: {
            RelativeToY = input.ReadFloat();
            break;
          }
          case 88: {
            Rotate = input.ReadBool();
            break;
          }
          case 96: {
            makeRelative_ = (global::Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types.MakeRelativeMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetCubeLightsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This is a uint_8 internally.
      /// </summary>
      public enum MakeRelativeMode {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("OFF")] Off = 1,
        [pbr::OriginalName("BY_CORNER")] ByCorner = 2,
        [pbr::OriginalName("BY_SIDE")] BySide = 3,
      }

    }
    #endregion

  }

  public sealed partial class SetCubeLightsResponse : pb::IMessage<SetCubeLightsResponse> {
    private static readonly pb::MessageParser<SetCubeLightsResponse> _parser = new pb::MessageParser<SetCubeLightsResponse>(() => new SetCubeLightsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCubeLightsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsResponse(SetCubeLightsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCubeLightsResponse Clone() {
      return new SetCubeLightsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCubeLightsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCubeLightsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCubeLightsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectAvailable : pb::IMessage<ObjectAvailable> {
    private static readonly pb::MessageParser<ObjectAvailable> _parser = new pb::MessageParser<ObjectAvailable>(() => new ObjectAvailable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectAvailable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvailable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvailable(ObjectAvailable other) : this() {
      factoryId_ = other.factoryId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvailable Clone() {
      return new ObjectAvailable(this);
    }

    /// <summary>Field number for the "factory_id" field.</summary>
    public const int FactoryIdFieldNumber = 1;
    private string factoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactoryId {
      get { return factoryId_; }
      set {
        factoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectAvailable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectAvailable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FactoryId != other.FactoryId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FactoryId.Length != 0) hash ^= FactoryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FactoryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FactoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FactoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactoryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectAvailable other) {
      if (other == null) {
        return;
      }
      if (other.FactoryId.Length != 0) {
        FactoryId = other.FactoryId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FactoryId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Indicates that a cube has connected or disconnected to the robot.
  /// This message will be sent for any connects or disconnects regardless
  /// of whether it originated from us or underlying robot behavior.
  /// </summary>
  public sealed partial class ObjectConnectionState : pb::IMessage<ObjectConnectionState> {
    private static readonly pb::MessageParser<ObjectConnectionState> _parser = new pb::MessageParser<ObjectConnectionState>(() => new ObjectConnectionState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectConnectionState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectConnectionState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectConnectionState(ObjectConnectionState other) : this() {
      objectId_ = other.objectId_;
      factoryId_ = other.factoryId_;
      objectType_ = other.objectType_;
      connected_ = other.connected_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectConnectionState Clone() {
      return new ObjectConnectionState(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "factory_id" field.</summary>
    public const int FactoryIdFieldNumber = 2;
    private string factoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactoryId {
      get { return factoryId_; }
      set {
        factoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_type" field.</summary>
    public const int ObjectTypeFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.ObjectType objectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectType ObjectType {
      get { return objectType_; }
      set {
        objectType_ = value;
      }
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 4;
    private bool connected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectConnectionState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectConnectionState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (FactoryId != other.FactoryId) return false;
      if (ObjectType != other.ObjectType) return false;
      if (Connected != other.Connected) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (FactoryId.Length != 0) hash ^= FactoryId.GetHashCode();
      if (ObjectType != 0) hash ^= ObjectType.GetHashCode();
      if (Connected != false) hash ^= Connected.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ObjectId);
      }
      if (FactoryId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FactoryId);
      }
      if (ObjectType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ObjectType);
      }
      if (Connected != false) {
        output.WriteRawTag(32);
        output.WriteBool(Connected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (FactoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactoryId);
      }
      if (ObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectType);
      }
      if (Connected != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectConnectionState other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.FactoryId.Length != 0) {
        FactoryId = other.FactoryId;
      }
      if (other.ObjectType != 0) {
        ObjectType = other.ObjectType;
      }
      if (other.Connected != false) {
        Connected = other.Connected;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectId = input.ReadUInt32();
            break;
          }
          case 18: {
            FactoryId = input.ReadString();
            break;
          }
          case 24: {
            objectType_ = (global::Anki.Vector.ExternalInterface.ObjectType) input.ReadEnum();
            break;
          }
          case 32: {
            Connected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectMoved : pb::IMessage<ObjectMoved> {
    private static readonly pb::MessageParser<ObjectMoved> _parser = new pb::MessageParser<ObjectMoved>(() => new ObjectMoved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectMoved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectMoved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectMoved(ObjectMoved other) : this() {
      timestamp_ = other.timestamp_;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectMoved Clone() {
      return new ObjectMoved(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectMoved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectMoved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectMoved other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectStoppedMoving : pb::IMessage<ObjectStoppedMoving> {
    private static readonly pb::MessageParser<ObjectStoppedMoving> _parser = new pb::MessageParser<ObjectStoppedMoving>(() => new ObjectStoppedMoving());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectStoppedMoving> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStoppedMoving() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStoppedMoving(ObjectStoppedMoving other) : this() {
      timestamp_ = other.timestamp_;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStoppedMoving Clone() {
      return new ObjectStoppedMoving(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectStoppedMoving);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectStoppedMoving other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectStoppedMoving other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectUpAxisChanged : pb::IMessage<ObjectUpAxisChanged> {
    private static readonly pb::MessageParser<ObjectUpAxisChanged> _parser = new pb::MessageParser<ObjectUpAxisChanged>(() => new ObjectUpAxisChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectUpAxisChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUpAxisChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUpAxisChanged(ObjectUpAxisChanged other) : this() {
      timestamp_ = other.timestamp_;
      objectId_ = other.objectId_;
      upAxis_ = other.upAxis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUpAxisChanged Clone() {
      return new ObjectUpAxisChanged(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "up_axis" field.</summary>
    public const int UpAxisFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.UpAxis upAxis_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.UpAxis UpAxis {
      get { return upAxis_; }
      set {
        upAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectUpAxisChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectUpAxisChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ObjectId != other.ObjectId) return false;
      if (UpAxis != other.UpAxis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (UpAxis != 0) hash ^= UpAxis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjectId);
      }
      if (UpAxis != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UpAxis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (UpAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpAxis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectUpAxisChanged other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.UpAxis != 0) {
        UpAxis = other.UpAxis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt32();
            break;
          }
          case 24: {
            upAxis_ = (global::Anki.Vector.ExternalInterface.UpAxis) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectTapped : pb::IMessage<ObjectTapped> {
    private static readonly pb::MessageParser<ObjectTapped> _parser = new pb::MessageParser<ObjectTapped>(() => new ObjectTapped());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectTapped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTapped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTapped(ObjectTapped other) : this() {
      timestamp_ = other.timestamp_;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTapped Clone() {
      return new ObjectTapped(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectTapped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectTapped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectTapped other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RobotObservedObject for signaling that an object
  ///  with specified ID/Type was seen at a particular location in the image
  ///  and the world
  /// </summary>
  public sealed partial class RobotObservedObject : pb::IMessage<RobotObservedObject> {
    private static readonly pb::MessageParser<RobotObservedObject> _parser = new pb::MessageParser<RobotObservedObject>(() => new RobotObservedObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotObservedObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedObject(RobotObservedObject other) : this() {
      timestamp_ = other.timestamp_;
      objectFamily_ = other.objectFamily_;
      objectType_ = other.objectType_;
      objectId_ = other.objectId_;
      imgRect_ = other.imgRect_ != null ? other.imgRect_.Clone() : null;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      topFaceOrientationRad_ = other.topFaceOrientationRad_;
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedObject Clone() {
      return new RobotObservedObject(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "object_family" field.</summary>
    public const int ObjectFamilyFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ObjectFamily objectFamily_ = 0;
    /// <summary>
    /// ObjectFamily is deprecated. Use ObjectType instead to reason about groupings of objects.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectFamily ObjectFamily {
      get { return objectFamily_; }
      set {
        objectFamily_ = value;
      }
    }

    /// <summary>Field number for the "object_type" field.</summary>
    public const int ObjectTypeFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.ObjectType objectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectType ObjectType {
      get { return objectType_; }
      set {
        objectType_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 4;
    private int objectId_;
    /// <summary>
    /// signed to match U2G::PickAndPlaceObject which has the option to have objectID&lt;0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "img_rect" field.</summary>
    public const int ImgRectFieldNumber = 5;
    private global::Anki.Vector.ExternalInterface.CladRect imgRect_;
    /// <summary>
    /// position in image coords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CladRect ImgRect {
      get { return imgRect_; }
      set {
        imgRect_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 6;
    private global::Anki.Vector.ExternalInterface.PoseStruct pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PoseStruct Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "top_face_orientation_rad" field.</summary>
    public const int TopFaceOrientationRadFieldNumber = 7;
    private float topFaceOrientationRad_;
    /// <summary>
    /// absolute orienation of top face, iff isActive==true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopFaceOrientationRad {
      get { return topFaceOrientationRad_; }
      set {
        topFaceOrientationRad_ = value;
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 8;
    private uint isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotObservedObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotObservedObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ObjectFamily != other.ObjectFamily) return false;
      if (ObjectType != other.ObjectType) return false;
      if (ObjectId != other.ObjectId) return false;
      if (!object.Equals(ImgRect, other.ImgRect)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TopFaceOrientationRad, other.TopFaceOrientationRad)) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ObjectFamily != 0) hash ^= ObjectFamily.GetHashCode();
      if (ObjectType != 0) hash ^= ObjectType.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (imgRect_ != null) hash ^= ImgRect.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (TopFaceOrientationRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TopFaceOrientationRad);
      if (IsActive != 0) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (ObjectFamily != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ObjectFamily);
      }
      if (ObjectType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ObjectType);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ObjectId);
      }
      if (imgRect_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ImgRect);
      }
      if (pose_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pose);
      }
      if (TopFaceOrientationRad != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TopFaceOrientationRad);
      }
      if (IsActive != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (ObjectFamily != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectFamily);
      }
      if (ObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectType);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectId);
      }
      if (imgRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImgRect);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (TopFaceOrientationRad != 0F) {
        size += 1 + 4;
      }
      if (IsActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsActive);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotObservedObject other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ObjectFamily != 0) {
        ObjectFamily = other.ObjectFamily;
      }
      if (other.ObjectType != 0) {
        ObjectType = other.ObjectType;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.imgRect_ != null) {
        if (imgRect_ == null) {
          imgRect_ = new global::Anki.Vector.ExternalInterface.CladRect();
        }
        ImgRect.MergeFrom(other.ImgRect);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Anki.Vector.ExternalInterface.PoseStruct();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.TopFaceOrientationRad != 0F) {
        TopFaceOrientationRad = other.TopFaceOrientationRad;
      }
      if (other.IsActive != 0) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            objectFamily_ = (global::Anki.Vector.ExternalInterface.ObjectFamily) input.ReadEnum();
            break;
          }
          case 24: {
            objectType_ = (global::Anki.Vector.ExternalInterface.ObjectType) input.ReadEnum();
            break;
          }
          case 32: {
            ObjectId = input.ReadInt32();
            break;
          }
          case 42: {
            if (imgRect_ == null) {
              imgRect_ = new global::Anki.Vector.ExternalInterface.CladRect();
            }
            input.ReadMessage(imgRect_);
            break;
          }
          case 50: {
            if (pose_ == null) {
              pose_ = new global::Anki.Vector.ExternalInterface.PoseStruct();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 61: {
            TopFaceOrientationRad = input.ReadFloat();
            break;
          }
          case 64: {
            IsActive = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Indicates that a the connection subscribed through ConnectCube has
  /// been lost.
  /// </summary>
  public sealed partial class CubeConnectionLost : pb::IMessage<CubeConnectionLost> {
    private static readonly pb::MessageParser<CubeConnectionLost> _parser = new pb::MessageParser<CubeConnectionLost>(() => new CubeConnectionLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CubeConnectionLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeConnectionLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeConnectionLost(CubeConnectionLost other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeConnectionLost Clone() {
      return new CubeConnectionLost(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CubeConnectionLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CubeConnectionLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CubeConnectionLost other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Deletes all custom objects matching a given deletion mode.
  /// </summary>
  public sealed partial class DeleteCustomObjectsRequest : pb::IMessage<DeleteCustomObjectsRequest> {
    private static readonly pb::MessageParser<DeleteCustomObjectsRequest> _parser = new pb::MessageParser<DeleteCustomObjectsRequest>(() => new DeleteCustomObjectsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCustomObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsRequest(DeleteCustomObjectsRequest other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsRequest Clone() {
      return new DeleteCustomObjectsRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CustomObjectDeletionMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectDeletionMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCustomObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCustomObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCustomObjectsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Anki.Vector.ExternalInterface.CustomObjectDeletionMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteCustomObjectsResponse : pb::IMessage<DeleteCustomObjectsResponse> {
    private static readonly pb::MessageParser<DeleteCustomObjectsResponse> _parser = new pb::MessageParser<DeleteCustomObjectsResponse>(() => new DeleteCustomObjectsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCustomObjectsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsResponse(DeleteCustomObjectsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCustomObjectsResponse Clone() {
      return new DeleteCustomObjectsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCustomObjectsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCustomObjectsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCustomObjectsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Creates a CustomObject at the specific pose with no markers associated with it
  /// Since this object has no markers with which to be observed, it will remain in the
  /// specified pose as an obstacle forever (or until deleted with a deletion message above)
  /// </summary>
  public sealed partial class CreateFixedCustomObjectRequest : pb::IMessage<CreateFixedCustomObjectRequest> {
    private static readonly pb::MessageParser<CreateFixedCustomObjectRequest> _parser = new pb::MessageParser<CreateFixedCustomObjectRequest>(() => new CreateFixedCustomObjectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFixedCustomObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectRequest(CreateFixedCustomObjectRequest other) : this() {
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      xSizeMm_ = other.xSizeMm_;
      ySizeMm_ = other.ySizeMm_;
      zSizeMm_ = other.zSizeMm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectRequest Clone() {
      return new CreateFixedCustomObjectRequest(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.PoseStruct pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PoseStruct Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "x_size_mm" field.</summary>
    public const int XSizeMmFieldNumber = 2;
    private float xSizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMm {
      get { return xSizeMm_; }
      set {
        xSizeMm_ = value;
      }
    }

    /// <summary>Field number for the "y_size_mm" field.</summary>
    public const int YSizeMmFieldNumber = 3;
    private float ySizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YSizeMm {
      get { return ySizeMm_; }
      set {
        ySizeMm_ = value;
      }
    }

    /// <summary>Field number for the "z_size_mm" field.</summary>
    public const int ZSizeMmFieldNumber = 4;
    private float zSizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZSizeMm {
      get { return zSizeMm_; }
      set {
        zSizeMm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFixedCustomObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFixedCustomObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMm, other.XSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YSizeMm, other.YSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZSizeMm, other.ZSizeMm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (XSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMm);
      if (YSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YSizeMm);
      if (ZSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZSizeMm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (XSizeMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XSizeMm);
      }
      if (YSizeMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YSizeMm);
      }
      if (ZSizeMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ZSizeMm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (XSizeMm != 0F) {
        size += 1 + 4;
      }
      if (YSizeMm != 0F) {
        size += 1 + 4;
      }
      if (ZSizeMm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFixedCustomObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Anki.Vector.ExternalInterface.PoseStruct();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.XSizeMm != 0F) {
        XSizeMm = other.XSizeMm;
      }
      if (other.YSizeMm != 0F) {
        YSizeMm = other.YSizeMm;
      }
      if (other.ZSizeMm != 0F) {
        ZSizeMm = other.ZSizeMm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pose_ == null) {
              pose_ = new global::Anki.Vector.ExternalInterface.PoseStruct();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 21: {
            XSizeMm = input.ReadFloat();
            break;
          }
          case 29: {
            YSizeMm = input.ReadFloat();
            break;
          }
          case 37: {
            ZSizeMm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateFixedCustomObjectResponse : pb::IMessage<CreateFixedCustomObjectResponse> {
    private static readonly pb::MessageParser<CreateFixedCustomObjectResponse> _parser = new pb::MessageParser<CreateFixedCustomObjectResponse>(() => new CreateFixedCustomObjectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFixedCustomObjectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectResponse(CreateFixedCustomObjectResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFixedCustomObjectResponse Clone() {
      return new CreateFixedCustomObjectResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private uint objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFixedCustomObjectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFixedCustomObjectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFixedCustomObjectResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a custom object of the given size with the given markers centered on each side
  /// If isUnique=true, there is guaranteed to be no more than one object of this type present in the world
  /// </summary>
  public sealed partial class CustomBoxDefinition : pb::IMessage<CustomBoxDefinition> {
    private static readonly pb::MessageParser<CustomBoxDefinition> _parser = new pb::MessageParser<CustomBoxDefinition>(() => new CustomBoxDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomBoxDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomBoxDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomBoxDefinition(CustomBoxDefinition other) : this() {
      markerFront_ = other.markerFront_;
      markerBack_ = other.markerBack_;
      markerTop_ = other.markerTop_;
      markerBottom_ = other.markerBottom_;
      markerLeft_ = other.markerLeft_;
      markerRight_ = other.markerRight_;
      xSizeMm_ = other.xSizeMm_;
      ySizeMm_ = other.ySizeMm_;
      zSizeMm_ = other.zSizeMm_;
      markerWidthMm_ = other.markerWidthMm_;
      markerHeightMm_ = other.markerHeightMm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomBoxDefinition Clone() {
      return new CustomBoxDefinition(this);
    }

    /// <summary>Field number for the "marker_front" field.</summary>
    public const int MarkerFrontFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerFront_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerFront {
      get { return markerFront_; }
      set {
        markerFront_ = value;
      }
    }

    /// <summary>Field number for the "marker_back" field.</summary>
    public const int MarkerBackFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerBack_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerBack {
      get { return markerBack_; }
      set {
        markerBack_ = value;
      }
    }

    /// <summary>Field number for the "marker_top" field.</summary>
    public const int MarkerTopFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerTop_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerTop {
      get { return markerTop_; }
      set {
        markerTop_ = value;
      }
    }

    /// <summary>Field number for the "marker_bottom" field.</summary>
    public const int MarkerBottomFieldNumber = 4;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerBottom_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerBottom {
      get { return markerBottom_; }
      set {
        markerBottom_ = value;
      }
    }

    /// <summary>Field number for the "marker_left" field.</summary>
    public const int MarkerLeftFieldNumber = 5;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerLeft_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerLeft {
      get { return markerLeft_; }
      set {
        markerLeft_ = value;
      }
    }

    /// <summary>Field number for the "marker_right" field.</summary>
    public const int MarkerRightFieldNumber = 6;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker markerRight_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker MarkerRight {
      get { return markerRight_; }
      set {
        markerRight_ = value;
      }
    }

    /// <summary>Field number for the "x_size_mm" field.</summary>
    public const int XSizeMmFieldNumber = 7;
    private float xSizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMm {
      get { return xSizeMm_; }
      set {
        xSizeMm_ = value;
      }
    }

    /// <summary>Field number for the "y_size_mm" field.</summary>
    public const int YSizeMmFieldNumber = 8;
    private float ySizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YSizeMm {
      get { return ySizeMm_; }
      set {
        ySizeMm_ = value;
      }
    }

    /// <summary>Field number for the "z_size_mm" field.</summary>
    public const int ZSizeMmFieldNumber = 9;
    private float zSizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZSizeMm {
      get { return zSizeMm_; }
      set {
        zSizeMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_width_mm" field.</summary>
    public const int MarkerWidthMmFieldNumber = 10;
    private float markerWidthMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerWidthMm {
      get { return markerWidthMm_; }
      set {
        markerWidthMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_height_mm" field.</summary>
    public const int MarkerHeightMmFieldNumber = 11;
    private float markerHeightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerHeightMm {
      get { return markerHeightMm_; }
      set {
        markerHeightMm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomBoxDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomBoxDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarkerFront != other.MarkerFront) return false;
      if (MarkerBack != other.MarkerBack) return false;
      if (MarkerTop != other.MarkerTop) return false;
      if (MarkerBottom != other.MarkerBottom) return false;
      if (MarkerLeft != other.MarkerLeft) return false;
      if (MarkerRight != other.MarkerRight) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMm, other.XSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YSizeMm, other.YSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZSizeMm, other.ZSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerWidthMm, other.MarkerWidthMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerHeightMm, other.MarkerHeightMm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarkerFront != 0) hash ^= MarkerFront.GetHashCode();
      if (MarkerBack != 0) hash ^= MarkerBack.GetHashCode();
      if (MarkerTop != 0) hash ^= MarkerTop.GetHashCode();
      if (MarkerBottom != 0) hash ^= MarkerBottom.GetHashCode();
      if (MarkerLeft != 0) hash ^= MarkerLeft.GetHashCode();
      if (MarkerRight != 0) hash ^= MarkerRight.GetHashCode();
      if (XSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMm);
      if (YSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YSizeMm);
      if (ZSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZSizeMm);
      if (MarkerWidthMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerWidthMm);
      if (MarkerHeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerHeightMm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarkerFront != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MarkerFront);
      }
      if (MarkerBack != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MarkerBack);
      }
      if (MarkerTop != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MarkerTop);
      }
      if (MarkerBottom != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MarkerBottom);
      }
      if (MarkerLeft != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MarkerLeft);
      }
      if (MarkerRight != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MarkerRight);
      }
      if (XSizeMm != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(XSizeMm);
      }
      if (YSizeMm != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(YSizeMm);
      }
      if (ZSizeMm != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ZSizeMm);
      }
      if (MarkerWidthMm != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MarkerWidthMm);
      }
      if (MarkerHeightMm != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MarkerHeightMm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarkerFront != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerFront);
      }
      if (MarkerBack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerBack);
      }
      if (MarkerTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerTop);
      }
      if (MarkerBottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerBottom);
      }
      if (MarkerLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerLeft);
      }
      if (MarkerRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerRight);
      }
      if (XSizeMm != 0F) {
        size += 1 + 4;
      }
      if (YSizeMm != 0F) {
        size += 1 + 4;
      }
      if (ZSizeMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerWidthMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerHeightMm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomBoxDefinition other) {
      if (other == null) {
        return;
      }
      if (other.MarkerFront != 0) {
        MarkerFront = other.MarkerFront;
      }
      if (other.MarkerBack != 0) {
        MarkerBack = other.MarkerBack;
      }
      if (other.MarkerTop != 0) {
        MarkerTop = other.MarkerTop;
      }
      if (other.MarkerBottom != 0) {
        MarkerBottom = other.MarkerBottom;
      }
      if (other.MarkerLeft != 0) {
        MarkerLeft = other.MarkerLeft;
      }
      if (other.MarkerRight != 0) {
        MarkerRight = other.MarkerRight;
      }
      if (other.XSizeMm != 0F) {
        XSizeMm = other.XSizeMm;
      }
      if (other.YSizeMm != 0F) {
        YSizeMm = other.YSizeMm;
      }
      if (other.ZSizeMm != 0F) {
        ZSizeMm = other.ZSizeMm;
      }
      if (other.MarkerWidthMm != 0F) {
        MarkerWidthMm = other.MarkerWidthMm;
      }
      if (other.MarkerHeightMm != 0F) {
        MarkerHeightMm = other.MarkerHeightMm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            markerFront_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 16: {
            markerBack_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 24: {
            markerTop_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 32: {
            markerBottom_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 40: {
            markerLeft_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 48: {
            markerRight_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 61: {
            XSizeMm = input.ReadFloat();
            break;
          }
          case 69: {
            YSizeMm = input.ReadFloat();
            break;
          }
          case 77: {
            ZSizeMm = input.ReadFloat();
            break;
          }
          case 85: {
            MarkerWidthMm = input.ReadFloat();
            break;
          }
          case 93: {
            MarkerHeightMm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a custom cube of the given size. The cube will have the same marker centered on all faces.
  /// If isUnique=true, there is guaranteed to be no more than one cube of this type present in the world at a time.
  /// </summary>
  public sealed partial class CustomCubeDefinition : pb::IMessage<CustomCubeDefinition> {
    private static readonly pb::MessageParser<CustomCubeDefinition> _parser = new pb::MessageParser<CustomCubeDefinition>(() => new CustomCubeDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomCubeDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomCubeDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomCubeDefinition(CustomCubeDefinition other) : this() {
      marker_ = other.marker_;
      sizeMm_ = other.sizeMm_;
      markerWidthMm_ = other.markerWidthMm_;
      markerHeightMm_ = other.markerHeightMm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomCubeDefinition Clone() {
      return new CustomCubeDefinition(this);
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker marker_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }

    /// <summary>Field number for the "size_mm" field.</summary>
    public const int SizeMmFieldNumber = 2;
    private float sizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SizeMm {
      get { return sizeMm_; }
      set {
        sizeMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_width_mm" field.</summary>
    public const int MarkerWidthMmFieldNumber = 3;
    private float markerWidthMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerWidthMm {
      get { return markerWidthMm_; }
      set {
        markerWidthMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_height_mm" field.</summary>
    public const int MarkerHeightMmFieldNumber = 4;
    private float markerHeightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerHeightMm {
      get { return markerHeightMm_; }
      set {
        markerHeightMm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomCubeDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomCubeDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Marker != other.Marker) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SizeMm, other.SizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerWidthMm, other.MarkerWidthMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerHeightMm, other.MarkerHeightMm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Marker != 0) hash ^= Marker.GetHashCode();
      if (SizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SizeMm);
      if (MarkerWidthMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerWidthMm);
      if (MarkerHeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerHeightMm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Marker != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Marker);
      }
      if (SizeMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SizeMm);
      }
      if (MarkerWidthMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MarkerWidthMm);
      }
      if (MarkerHeightMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MarkerHeightMm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Marker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Marker);
      }
      if (SizeMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerWidthMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerHeightMm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomCubeDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Marker != 0) {
        Marker = other.Marker;
      }
      if (other.SizeMm != 0F) {
        SizeMm = other.SizeMm;
      }
      if (other.MarkerWidthMm != 0F) {
        MarkerWidthMm = other.MarkerWidthMm;
      }
      if (other.MarkerHeightMm != 0F) {
        MarkerHeightMm = other.MarkerHeightMm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            marker_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 21: {
            SizeMm = input.ReadFloat();
            break;
          }
          case 29: {
            MarkerWidthMm = input.ReadFloat();
            break;
          }
          case 37: {
            MarkerHeightMm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a custom wall of the given height and width, with the same marker centered on both sides (front and back).
  /// The wall's thickness is assumed to be 1cm (and thus there are no markers on its left, right, top, or bottom)
  /// If isUnique=true, there is guaranteed to be no more than one wall of this type present in the world at a time.
  /// </summary>
  public sealed partial class CustomWallDefinition : pb::IMessage<CustomWallDefinition> {
    private static readonly pb::MessageParser<CustomWallDefinition> _parser = new pb::MessageParser<CustomWallDefinition>(() => new CustomWallDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomWallDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomWallDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomWallDefinition(CustomWallDefinition other) : this() {
      marker_ = other.marker_;
      widthMm_ = other.widthMm_;
      heightMm_ = other.heightMm_;
      markerWidthMm_ = other.markerWidthMm_;
      markerHeightMm_ = other.markerHeightMm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomWallDefinition Clone() {
      return new CustomWallDefinition(this);
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CustomObjectMarker marker_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomObjectMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }

    /// <summary>Field number for the "width_mm" field.</summary>
    public const int WidthMmFieldNumber = 2;
    private float widthMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WidthMm {
      get { return widthMm_; }
      set {
        widthMm_ = value;
      }
    }

    /// <summary>Field number for the "height_mm" field.</summary>
    public const int HeightMmFieldNumber = 3;
    private float heightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightMm {
      get { return heightMm_; }
      set {
        heightMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_width_mm" field.</summary>
    public const int MarkerWidthMmFieldNumber = 4;
    private float markerWidthMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerWidthMm {
      get { return markerWidthMm_; }
      set {
        markerWidthMm_ = value;
      }
    }

    /// <summary>Field number for the "marker_height_mm" field.</summary>
    public const int MarkerHeightMmFieldNumber = 5;
    private float markerHeightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkerHeightMm {
      get { return markerHeightMm_; }
      set {
        markerHeightMm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomWallDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomWallDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Marker != other.Marker) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WidthMm, other.WidthMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightMm, other.HeightMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerWidthMm, other.MarkerWidthMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkerHeightMm, other.MarkerHeightMm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Marker != 0) hash ^= Marker.GetHashCode();
      if (WidthMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WidthMm);
      if (HeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightMm);
      if (MarkerWidthMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerWidthMm);
      if (MarkerHeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkerHeightMm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Marker != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Marker);
      }
      if (WidthMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(WidthMm);
      }
      if (HeightMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HeightMm);
      }
      if (MarkerWidthMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MarkerWidthMm);
      }
      if (MarkerHeightMm != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MarkerHeightMm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Marker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Marker);
      }
      if (WidthMm != 0F) {
        size += 1 + 4;
      }
      if (HeightMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerWidthMm != 0F) {
        size += 1 + 4;
      }
      if (MarkerHeightMm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomWallDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Marker != 0) {
        Marker = other.Marker;
      }
      if (other.WidthMm != 0F) {
        WidthMm = other.WidthMm;
      }
      if (other.HeightMm != 0F) {
        HeightMm = other.HeightMm;
      }
      if (other.MarkerWidthMm != 0F) {
        MarkerWidthMm = other.MarkerWidthMm;
      }
      if (other.MarkerHeightMm != 0F) {
        MarkerHeightMm = other.MarkerHeightMm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            marker_ = (global::Anki.Vector.ExternalInterface.CustomObjectMarker) input.ReadEnum();
            break;
          }
          case 21: {
            WidthMm = input.ReadFloat();
            break;
          }
          case 29: {
            HeightMm = input.ReadFloat();
            break;
          }
          case 37: {
            MarkerWidthMm = input.ReadFloat();
            break;
          }
          case 45: {
            MarkerHeightMm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineCustomObjectRequest : pb::IMessage<DefineCustomObjectRequest> {
    private static readonly pb::MessageParser<DefineCustomObjectRequest> _parser = new pb::MessageParser<DefineCustomObjectRequest>(() => new DefineCustomObjectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineCustomObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectRequest(DefineCustomObjectRequest other) : this() {
      customType_ = other.customType_;
      isUnique_ = other.isUnique_;
      switch (other.CustomObjectDefinitionCase) {
        case CustomObjectDefinitionOneofCase.CustomBox:
          CustomBox = other.CustomBox.Clone();
          break;
        case CustomObjectDefinitionOneofCase.CustomCube:
          CustomCube = other.CustomCube.Clone();
          break;
        case CustomObjectDefinitionOneofCase.CustomWall:
          CustomWall = other.CustomWall.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectRequest Clone() {
      return new DefineCustomObjectRequest(this);
    }

    /// <summary>Field number for the "custom_type" field.</summary>
    public const int CustomTypeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CustomType customType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomType CustomType {
      get { return customType_; }
      set {
        customType_ = value;
      }
    }

    /// <summary>Field number for the "is_unique" field.</summary>
    public const int IsUniqueFieldNumber = 2;
    private bool isUnique_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnique {
      get { return isUnique_; }
      set {
        isUnique_ = value;
      }
    }

    /// <summary>Field number for the "custom_box" field.</summary>
    public const int CustomBoxFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomBoxDefinition CustomBox {
      get { return customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomBox ? (global::Anki.Vector.ExternalInterface.CustomBoxDefinition) customObjectDefinition_ : null; }
      set {
        customObjectDefinition_ = value;
        customObjectDefinitionCase_ = value == null ? CustomObjectDefinitionOneofCase.None : CustomObjectDefinitionOneofCase.CustomBox;
      }
    }

    /// <summary>Field number for the "custom_cube" field.</summary>
    public const int CustomCubeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomCubeDefinition CustomCube {
      get { return customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomCube ? (global::Anki.Vector.ExternalInterface.CustomCubeDefinition) customObjectDefinition_ : null; }
      set {
        customObjectDefinition_ = value;
        customObjectDefinitionCase_ = value == null ? CustomObjectDefinitionOneofCase.None : CustomObjectDefinitionOneofCase.CustomCube;
      }
    }

    /// <summary>Field number for the "custom_wall" field.</summary>
    public const int CustomWallFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CustomWallDefinition CustomWall {
      get { return customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomWall ? (global::Anki.Vector.ExternalInterface.CustomWallDefinition) customObjectDefinition_ : null; }
      set {
        customObjectDefinition_ = value;
        customObjectDefinitionCase_ = value == null ? CustomObjectDefinitionOneofCase.None : CustomObjectDefinitionOneofCase.CustomWall;
      }
    }

    private object customObjectDefinition_;
    /// <summary>Enum of possible cases for the "custom_object_definition" oneof.</summary>
    public enum CustomObjectDefinitionOneofCase {
      None = 0,
      CustomBox = 3,
      CustomCube = 4,
      CustomWall = 5,
    }
    private CustomObjectDefinitionOneofCase customObjectDefinitionCase_ = CustomObjectDefinitionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomObjectDefinitionOneofCase CustomObjectDefinitionCase {
      get { return customObjectDefinitionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomObjectDefinition() {
      customObjectDefinitionCase_ = CustomObjectDefinitionOneofCase.None;
      customObjectDefinition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineCustomObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineCustomObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomType != other.CustomType) return false;
      if (IsUnique != other.IsUnique) return false;
      if (!object.Equals(CustomBox, other.CustomBox)) return false;
      if (!object.Equals(CustomCube, other.CustomCube)) return false;
      if (!object.Equals(CustomWall, other.CustomWall)) return false;
      if (CustomObjectDefinitionCase != other.CustomObjectDefinitionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomType != 0) hash ^= CustomType.GetHashCode();
      if (IsUnique != false) hash ^= IsUnique.GetHashCode();
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomBox) hash ^= CustomBox.GetHashCode();
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomCube) hash ^= CustomCube.GetHashCode();
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomWall) hash ^= CustomWall.GetHashCode();
      hash ^= (int) customObjectDefinitionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CustomType);
      }
      if (IsUnique != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsUnique);
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomBox) {
        output.WriteRawTag(26);
        output.WriteMessage(CustomBox);
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomCube) {
        output.WriteRawTag(34);
        output.WriteMessage(CustomCube);
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomWall) {
        output.WriteRawTag(42);
        output.WriteMessage(CustomWall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CustomType);
      }
      if (IsUnique != false) {
        size += 1 + 1;
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomBox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomBox);
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomCube) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomCube);
      }
      if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomWall) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomWall);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineCustomObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.CustomType != 0) {
        CustomType = other.CustomType;
      }
      if (other.IsUnique != false) {
        IsUnique = other.IsUnique;
      }
      switch (other.CustomObjectDefinitionCase) {
        case CustomObjectDefinitionOneofCase.CustomBox:
          if (CustomBox == null) {
            CustomBox = new global::Anki.Vector.ExternalInterface.CustomBoxDefinition();
          }
          CustomBox.MergeFrom(other.CustomBox);
          break;
        case CustomObjectDefinitionOneofCase.CustomCube:
          if (CustomCube == null) {
            CustomCube = new global::Anki.Vector.ExternalInterface.CustomCubeDefinition();
          }
          CustomCube.MergeFrom(other.CustomCube);
          break;
        case CustomObjectDefinitionOneofCase.CustomWall:
          if (CustomWall == null) {
            CustomWall = new global::Anki.Vector.ExternalInterface.CustomWallDefinition();
          }
          CustomWall.MergeFrom(other.CustomWall);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            customType_ = (global::Anki.Vector.ExternalInterface.CustomType) input.ReadEnum();
            break;
          }
          case 16: {
            IsUnique = input.ReadBool();
            break;
          }
          case 26: {
            global::Anki.Vector.ExternalInterface.CustomBoxDefinition subBuilder = new global::Anki.Vector.ExternalInterface.CustomBoxDefinition();
            if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomBox) {
              subBuilder.MergeFrom(CustomBox);
            }
            input.ReadMessage(subBuilder);
            CustomBox = subBuilder;
            break;
          }
          case 34: {
            global::Anki.Vector.ExternalInterface.CustomCubeDefinition subBuilder = new global::Anki.Vector.ExternalInterface.CustomCubeDefinition();
            if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomCube) {
              subBuilder.MergeFrom(CustomCube);
            }
            input.ReadMessage(subBuilder);
            CustomCube = subBuilder;
            break;
          }
          case 42: {
            global::Anki.Vector.ExternalInterface.CustomWallDefinition subBuilder = new global::Anki.Vector.ExternalInterface.CustomWallDefinition();
            if (customObjectDefinitionCase_ == CustomObjectDefinitionOneofCase.CustomWall) {
              subBuilder.MergeFrom(CustomWall);
            }
            input.ReadMessage(subBuilder);
            CustomWall = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineCustomObjectResponse : pb::IMessage<DefineCustomObjectResponse> {
    private static readonly pb::MessageParser<DefineCustomObjectResponse> _parser = new pb::MessageParser<DefineCustomObjectResponse>(() => new DefineCustomObjectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineCustomObjectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectResponse(DefineCustomObjectResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineCustomObjectResponse Clone() {
      return new DefineCustomObjectResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineCustomObjectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineCustomObjectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineCustomObjectResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectEvent : pb::IMessage<ObjectEvent> {
    private static readonly pb::MessageParser<ObjectEvent> _parser = new pb::MessageParser<ObjectEvent>(() => new ObjectEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectEvent(ObjectEvent other) : this() {
      switch (other.ObjectEventTypeCase) {
        case ObjectEventTypeOneofCase.ObjectAvailable:
          ObjectAvailable = other.ObjectAvailable.Clone();
          break;
        case ObjectEventTypeOneofCase.ObjectConnectionState:
          ObjectConnectionState = other.ObjectConnectionState.Clone();
          break;
        case ObjectEventTypeOneofCase.ObjectMoved:
          ObjectMoved = other.ObjectMoved.Clone();
          break;
        case ObjectEventTypeOneofCase.ObjectStoppedMoving:
          ObjectStoppedMoving = other.ObjectStoppedMoving.Clone();
          break;
        case ObjectEventTypeOneofCase.ObjectUpAxisChanged:
          ObjectUpAxisChanged = other.ObjectUpAxisChanged.Clone();
          break;
        case ObjectEventTypeOneofCase.ObjectTapped:
          ObjectTapped = other.ObjectTapped.Clone();
          break;
        case ObjectEventTypeOneofCase.RobotObservedObject:
          RobotObservedObject = other.RobotObservedObject.Clone();
          break;
        case ObjectEventTypeOneofCase.CubeConnectionLost:
          CubeConnectionLost = other.CubeConnectionLost.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectEvent Clone() {
      return new ObjectEvent(this);
    }

    /// <summary>Field number for the "object_available" field.</summary>
    public const int ObjectAvailableFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectAvailable ObjectAvailable {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectAvailable ? (global::Anki.Vector.ExternalInterface.ObjectAvailable) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectAvailable;
      }
    }

    /// <summary>Field number for the "object_connection_state" field.</summary>
    public const int ObjectConnectionStateFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectConnectionState ObjectConnectionState {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectConnectionState ? (global::Anki.Vector.ExternalInterface.ObjectConnectionState) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectConnectionState;
      }
    }

    /// <summary>Field number for the "object_moved" field.</summary>
    public const int ObjectMovedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectMoved ObjectMoved {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectMoved ? (global::Anki.Vector.ExternalInterface.ObjectMoved) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectMoved;
      }
    }

    /// <summary>Field number for the "object_stopped_moving" field.</summary>
    public const int ObjectStoppedMovingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectStoppedMoving ObjectStoppedMoving {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectStoppedMoving ? (global::Anki.Vector.ExternalInterface.ObjectStoppedMoving) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectStoppedMoving;
      }
    }

    /// <summary>Field number for the "object_up_axis_changed" field.</summary>
    public const int ObjectUpAxisChangedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged ObjectUpAxisChanged {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectUpAxisChanged ? (global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectUpAxisChanged;
      }
    }

    /// <summary>Field number for the "object_tapped" field.</summary>
    public const int ObjectTappedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectTapped ObjectTapped {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectTapped ? (global::Anki.Vector.ExternalInterface.ObjectTapped) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.ObjectTapped;
      }
    }

    /// <summary>Field number for the "robot_observed_object" field.</summary>
    public const int RobotObservedObjectFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotObservedObject RobotObservedObject {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.RobotObservedObject ? (global::Anki.Vector.ExternalInterface.RobotObservedObject) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.RobotObservedObject;
      }
    }

    /// <summary>Field number for the "cube_connection_lost" field.</summary>
    public const int CubeConnectionLostFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CubeConnectionLost CubeConnectionLost {
      get { return objectEventTypeCase_ == ObjectEventTypeOneofCase.CubeConnectionLost ? (global::Anki.Vector.ExternalInterface.CubeConnectionLost) objectEventType_ : null; }
      set {
        objectEventType_ = value;
        objectEventTypeCase_ = value == null ? ObjectEventTypeOneofCase.None : ObjectEventTypeOneofCase.CubeConnectionLost;
      }
    }

    private object objectEventType_;
    /// <summary>Enum of possible cases for the "object_event_type" oneof.</summary>
    public enum ObjectEventTypeOneofCase {
      None = 0,
      ObjectAvailable = 1,
      ObjectConnectionState = 2,
      ObjectMoved = 3,
      ObjectStoppedMoving = 4,
      ObjectUpAxisChanged = 5,
      ObjectTapped = 6,
      RobotObservedObject = 7,
      CubeConnectionLost = 8,
    }
    private ObjectEventTypeOneofCase objectEventTypeCase_ = ObjectEventTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectEventTypeOneofCase ObjectEventTypeCase {
      get { return objectEventTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectEventType() {
      objectEventTypeCase_ = ObjectEventTypeOneofCase.None;
      objectEventType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectAvailable, other.ObjectAvailable)) return false;
      if (!object.Equals(ObjectConnectionState, other.ObjectConnectionState)) return false;
      if (!object.Equals(ObjectMoved, other.ObjectMoved)) return false;
      if (!object.Equals(ObjectStoppedMoving, other.ObjectStoppedMoving)) return false;
      if (!object.Equals(ObjectUpAxisChanged, other.ObjectUpAxisChanged)) return false;
      if (!object.Equals(ObjectTapped, other.ObjectTapped)) return false;
      if (!object.Equals(RobotObservedObject, other.RobotObservedObject)) return false;
      if (!object.Equals(CubeConnectionLost, other.CubeConnectionLost)) return false;
      if (ObjectEventTypeCase != other.ObjectEventTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectAvailable) hash ^= ObjectAvailable.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectConnectionState) hash ^= ObjectConnectionState.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectMoved) hash ^= ObjectMoved.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectStoppedMoving) hash ^= ObjectStoppedMoving.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectUpAxisChanged) hash ^= ObjectUpAxisChanged.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectTapped) hash ^= ObjectTapped.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.RobotObservedObject) hash ^= RobotObservedObject.GetHashCode();
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.CubeConnectionLost) hash ^= CubeConnectionLost.GetHashCode();
      hash ^= (int) objectEventTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectAvailable) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectAvailable);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectConnectionState) {
        output.WriteRawTag(18);
        output.WriteMessage(ObjectConnectionState);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectMoved) {
        output.WriteRawTag(26);
        output.WriteMessage(ObjectMoved);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectStoppedMoving) {
        output.WriteRawTag(34);
        output.WriteMessage(ObjectStoppedMoving);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectUpAxisChanged) {
        output.WriteRawTag(42);
        output.WriteMessage(ObjectUpAxisChanged);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectTapped) {
        output.WriteRawTag(50);
        output.WriteMessage(ObjectTapped);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.RobotObservedObject) {
        output.WriteRawTag(58);
        output.WriteMessage(RobotObservedObject);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.CubeConnectionLost) {
        output.WriteRawTag(66);
        output.WriteMessage(CubeConnectionLost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectAvailable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectAvailable);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectConnectionState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectConnectionState);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectMoved) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectMoved);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectStoppedMoving) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectStoppedMoving);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectUpAxisChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectUpAxisChanged);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectTapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectTapped);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.RobotObservedObject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotObservedObject);
      }
      if (objectEventTypeCase_ == ObjectEventTypeOneofCase.CubeConnectionLost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CubeConnectionLost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectEvent other) {
      if (other == null) {
        return;
      }
      switch (other.ObjectEventTypeCase) {
        case ObjectEventTypeOneofCase.ObjectAvailable:
          if (ObjectAvailable == null) {
            ObjectAvailable = new global::Anki.Vector.ExternalInterface.ObjectAvailable();
          }
          ObjectAvailable.MergeFrom(other.ObjectAvailable);
          break;
        case ObjectEventTypeOneofCase.ObjectConnectionState:
          if (ObjectConnectionState == null) {
            ObjectConnectionState = new global::Anki.Vector.ExternalInterface.ObjectConnectionState();
          }
          ObjectConnectionState.MergeFrom(other.ObjectConnectionState);
          break;
        case ObjectEventTypeOneofCase.ObjectMoved:
          if (ObjectMoved == null) {
            ObjectMoved = new global::Anki.Vector.ExternalInterface.ObjectMoved();
          }
          ObjectMoved.MergeFrom(other.ObjectMoved);
          break;
        case ObjectEventTypeOneofCase.ObjectStoppedMoving:
          if (ObjectStoppedMoving == null) {
            ObjectStoppedMoving = new global::Anki.Vector.ExternalInterface.ObjectStoppedMoving();
          }
          ObjectStoppedMoving.MergeFrom(other.ObjectStoppedMoving);
          break;
        case ObjectEventTypeOneofCase.ObjectUpAxisChanged:
          if (ObjectUpAxisChanged == null) {
            ObjectUpAxisChanged = new global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged();
          }
          ObjectUpAxisChanged.MergeFrom(other.ObjectUpAxisChanged);
          break;
        case ObjectEventTypeOneofCase.ObjectTapped:
          if (ObjectTapped == null) {
            ObjectTapped = new global::Anki.Vector.ExternalInterface.ObjectTapped();
          }
          ObjectTapped.MergeFrom(other.ObjectTapped);
          break;
        case ObjectEventTypeOneofCase.RobotObservedObject:
          if (RobotObservedObject == null) {
            RobotObservedObject = new global::Anki.Vector.ExternalInterface.RobotObservedObject();
          }
          RobotObservedObject.MergeFrom(other.RobotObservedObject);
          break;
        case ObjectEventTypeOneofCase.CubeConnectionLost:
          if (CubeConnectionLost == null) {
            CubeConnectionLost = new global::Anki.Vector.ExternalInterface.CubeConnectionLost();
          }
          CubeConnectionLost.MergeFrom(other.CubeConnectionLost);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.ObjectAvailable subBuilder = new global::Anki.Vector.ExternalInterface.ObjectAvailable();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectAvailable) {
              subBuilder.MergeFrom(ObjectAvailable);
            }
            input.ReadMessage(subBuilder);
            ObjectAvailable = subBuilder;
            break;
          }
          case 18: {
            global::Anki.Vector.ExternalInterface.ObjectConnectionState subBuilder = new global::Anki.Vector.ExternalInterface.ObjectConnectionState();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectConnectionState) {
              subBuilder.MergeFrom(ObjectConnectionState);
            }
            input.ReadMessage(subBuilder);
            ObjectConnectionState = subBuilder;
            break;
          }
          case 26: {
            global::Anki.Vector.ExternalInterface.ObjectMoved subBuilder = new global::Anki.Vector.ExternalInterface.ObjectMoved();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectMoved) {
              subBuilder.MergeFrom(ObjectMoved);
            }
            input.ReadMessage(subBuilder);
            ObjectMoved = subBuilder;
            break;
          }
          case 34: {
            global::Anki.Vector.ExternalInterface.ObjectStoppedMoving subBuilder = new global::Anki.Vector.ExternalInterface.ObjectStoppedMoving();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectStoppedMoving) {
              subBuilder.MergeFrom(ObjectStoppedMoving);
            }
            input.ReadMessage(subBuilder);
            ObjectStoppedMoving = subBuilder;
            break;
          }
          case 42: {
            global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged subBuilder = new global::Anki.Vector.ExternalInterface.ObjectUpAxisChanged();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectUpAxisChanged) {
              subBuilder.MergeFrom(ObjectUpAxisChanged);
            }
            input.ReadMessage(subBuilder);
            ObjectUpAxisChanged = subBuilder;
            break;
          }
          case 50: {
            global::Anki.Vector.ExternalInterface.ObjectTapped subBuilder = new global::Anki.Vector.ExternalInterface.ObjectTapped();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.ObjectTapped) {
              subBuilder.MergeFrom(ObjectTapped);
            }
            input.ReadMessage(subBuilder);
            ObjectTapped = subBuilder;
            break;
          }
          case 58: {
            global::Anki.Vector.ExternalInterface.RobotObservedObject subBuilder = new global::Anki.Vector.ExternalInterface.RobotObservedObject();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.RobotObservedObject) {
              subBuilder.MergeFrom(RobotObservedObject);
            }
            input.ReadMessage(subBuilder);
            RobotObservedObject = subBuilder;
            break;
          }
          case 66: {
            global::Anki.Vector.ExternalInterface.CubeConnectionLost subBuilder = new global::Anki.Vector.ExternalInterface.CubeConnectionLost();
            if (objectEventTypeCase_ == ObjectEventTypeOneofCase.CubeConnectionLost) {
              subBuilder.MergeFrom(CubeConnectionLost);
            }
            input.ReadMessage(subBuilder);
            CubeConnectionLost = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
